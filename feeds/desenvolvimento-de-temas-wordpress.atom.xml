<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>excript.com</title><link href="http://www.excript.com/" rel="alternate"></link><link href="http://www.excript.com/feeds/desenvolvimento-de-temas-wordpress.atom.xml" rel="self"></link><id>http://www.excript.com/</id><updated>2016-01-05T00:00:00-02:00</updated><entry><title>Visão Geral do Curso de Wordpress</title><link href="http://www.excript.com/wordpress/visao-geral-curso-wordpress.html" rel="alternate"></link><updated>2016-01-05T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-05:wordpress/visao-geral-curso-wordpress.html</id><summary type="html">&lt;div class="section" id="abertura"&gt;
&lt;h2&gt;ABERTURA&lt;/h2&gt;
&lt;p&gt;Fala galera, sejam todos bem-vidos ao nosso curso de desenvolvimento de temas para o Wordpress com o framework Bootstrap.&lt;/p&gt;
&lt;p&gt;Se o seu objetivo é entender como desenvolver um tema personalizado para o Wordpress, esse curso foi feito para você. A partir de agora, estudaremos não somente como produzir códigos para o WP, mas sim, como montar e configurar uma ambiente para facilitar o desenvolvimento Wordpress.&lt;/p&gt;
&lt;p&gt;Na gravação das aulas, utilizamos uma IDE proprietária, o PHPStorm, porrém, sinta-se livre e trabalhe com a sua IDE preferida. Tendo em vista que o desenvolvimento de temas é uma área bastante ampla, ensimos como montar um amibente de desenvolvimento com o PHPStorm e também, como depurar os scripts. Então, é importante que a sua IDE permita-lhe a depuração de código PHP, até porque, essa é uma capacidade muito importante para todo o ciclo de desenvolvimento.&lt;/p&gt;
&lt;p&gt;Também é importante que você anote os arquivos que iremos criar e a sua respectiva função, como também, certifique-se de criar um bloco de anotações que contenha a lista de variáveis globais, constantes e funções que iremos acessar e descreva a utilidade da mesma. Isso porque, o trabalho de desenvolvimento de temas ou plugins depende da utilização e do conhecimento da API do Wordpress, logo, se você não souber como executar ou extrair determinada informação, terás que recorrer a fóruns para descobrir.&lt;/p&gt;
&lt;p&gt;Por isso, a necessidade de anotar os módulos e as funções que iremos utilizar, para que caso você venha a esquecer, basta consultar as suas anotações e assim, consigas rapidamente obter um nome de uma variável, função ou arquivo.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>XAMPP e Wordpress</title><link href="http://www.excript.com/temas_wordpress/xampp-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:temas_wordpress/xampp-wordpress.html</id><summary type="html">&lt;div class="section" id="xampp"&gt;
&lt;h2&gt;XAMPP&lt;/h2&gt;
&lt;!-- lembrar que o Skype deve estar fechado, senão, pode dar problemas na inicialização do XAMPP --&gt;
&lt;p&gt;XAMPP é um pacote que contém um conjunto de ferramentas que são utilizas para o desenvolvimento Web. A palavra XAMPP é um acrônimo de 4 softwares distintos, são eles: Apache, MySQL, PHP, Perl. O X no início do nome, representa que o pacote é independente to a plataforma, ou seja, existem versões tanto para Windows, Linux ou Mac.&lt;/p&gt;
&lt;p&gt;A principal razão para utilizarmos o XAMPP é para evitarmos a necessidade de termos que utilizar um servidor de terceiro para executar nossos scripts PHP ou então, a necessidade de ter que configurar todo um ambiente para que então, possamos iniciar a programação. Tudo isso sem contar a problemática de configurar todos os programas a fim de fazer com que os mesmos se comuniquem de maneira análoga ao que acontecerá quando enviarmos nosso site para um servidor. Essa é a principal razão para instalarmos o XAMPP e são por essas razões que recomendamos o seu uso.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Arquivos Estaticos do Wordpress</title><link href="http://www.excript.com/wordpress/arquivo-estatico-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/arquivo-estatico-wordpress.html</id><summary type="html">&lt;div class="section" id="arquivos-estaticos"&gt;
&lt;h2&gt;ARQUIVOS ESTÁTICOS&lt;/h2&gt;
&lt;p&gt;Na construção de praticamente qualquer website, existe a necessidade do carregamento de arquivos estáticos, como por exemplo, arquivos CSS e JavaScript. Ainda que seja possível adicionarmos estes arquivos no código que está contido nos arquivos PHP, ou então, podemos adicionar arquivos CSS incluindo-os no arquivo de estilos obrigatório &lt;tt class="docutils literal"&gt;style.css&lt;/tt&gt; essa não é uma pratica recomndada. E a razão é bastante simples: o nosso tema precisa funcionar lado a lado com qualquer plug-in e assim, devemos seguir uma normatização para que tudo funcione simultaneamente.&lt;/p&gt;
&lt;p&gt;O Wordpress possui ferramentas para a adição de arquivos estáticos, como por exemplo, os arquivos CSS, JavaScript, Fontes e etc. Ainda que seja possível abrirmos estes arquivos adicionando-os nas seções do &lt;tt class="docutils literal"&gt;HTML&lt;/tt&gt;, está não é a melhor opção.&lt;/p&gt;
&lt;p&gt;Inicialmente, temos que lembrar-mos que o nosso tema deve funcionar lado a lado com qualquer plug-in. Logo, tanto os plug-ins como também o tema, irão fazer uso de arquivos estáticos e por isso, temos que adicionar os arquivos estáticos de tal forma que seja possível a verificação da versão de cada arquivo estático. Até porque, algum plug-in pode vir a precisar fazer uso, por exemplo, da última versão da biblioteca &lt;tt class="docutils literal"&gt;JQuery&lt;/tt&gt; enquanto que o nosso tema, ainda está utilizando uma versão mais antiga. Logo, temos que informar qual a versão da biblioteca o tema está utilizando para que os plug-ins possam manter compatibilidade ou então, para que estes possam solicitar a abertura de uma nova versão da biblioteca.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="funcao-add-action"&gt;
&lt;h2&gt;FUNÇÃO &lt;tt class="docutils literal"&gt;add_action()&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;A função &lt;tt class="docutils literal"&gt;add_action()&lt;/tt&gt; é uma forma para nós adicionarmos funcionalidades no wordpress sem que seja necessário manipularmos o código do framework.&lt;/p&gt;
&lt;p&gt;A função &lt;tt class="docutils literal"&gt;add_action()&lt;/tt&gt; é basicamente, um complemento a função &lt;tt class="docutils literal"&gt;do_action()&lt;/tt&gt;. Isso porque, antes de nós utilizarmos uma ação, a mesma deve ser declarada com a função &lt;tt class="docutils literal"&gt;do_action()&lt;/tt&gt;. A parte legal, é que nativamente, o wordpress tem implementado um série de ações e assim, basta somente vincularmos uma função a uma ação.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="registrando-os-arquivos-css"&gt;
&lt;h2&gt;REGISTRANDO OS ARQUIVOS CSS&lt;/h2&gt;
&lt;p&gt;Para abrirmos nossos arquivos CSS, devemos utilizar a função &lt;tt class="docutils literal"&gt;wp_register_style()&lt;/tt&gt;. Temos que enviar 5 valores como parâmetro, são eles:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Definição da função contida no arquivo &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;functions.wp-styles.php&lt;/span&gt;&lt;/tt&gt; que está contido na pasta &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-includes&lt;/span&gt;&lt;/tt&gt;.&lt;/dt&gt;
&lt;dd&gt;wp_register_style( $handle, $src, $deps = array(), $ver = false, $media = 'all' )&lt;/dd&gt;
&lt;/dl&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;$handle&lt;/li&gt;
&lt;li&gt;$src&lt;/li&gt;
&lt;li&gt;$deps = array()&lt;/li&gt;
&lt;li&gt;$ver = false&lt;/li&gt;
&lt;li&gt;$media = 'all'&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nome ($handle): Nome que define o arquivo CSS
URL ($src): A URL para a sua abertura
Dependencias ($deps = array()): Adicionar o nome das dependências do CSS
Versão ($ver = false): Versão do arquivo CSS
Media ($media = 'all'): Os locais onde utilizaremos essa folha de estilos (all, print, screen)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//Abertura do CSS&lt;/span&gt;
&lt;span class="nx"&gt;add_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wp_enqueue_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;toinnn_load_style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toinnn_load_style&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Bootstrap&lt;/span&gt;
        &lt;span class="nx"&gt;wp_register_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bs-styles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;wp_enqueue_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bs-styles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Theme Styles&lt;/span&gt;
        &lt;span class="nx"&gt;wp_register_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;theme-styles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;get_stylesheet_uri&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;wp_enqueue_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;theme-styles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="registrando-os-arquivos-javascript"&gt;
&lt;h2&gt;REGISTRANDO OS ARQUIVOS JAVASCRIPT&lt;/h2&gt;
&lt;p&gt;Os arquivos estáticos JavaScritp funcionam de maneira semelhante aos arquivos estáticos CSS. Porém, para registrarmos os arquivos que devem ser abertos, utilizamos outra função.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Definição da função contida no arquivo &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;functions.wp-scripts.php&lt;/span&gt;&lt;/tt&gt; que está contido na pasta &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-includes&lt;/span&gt;&lt;/tt&gt;.&lt;/dt&gt;
&lt;dd&gt;function wp_register_script( $handle, $src, $deps = array(), $ver = false, $in_footer = false ) {&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Nome ($handle): Nome que define o arquivo JavaScript
URL ($src): A URL para a sua abertura
Dependências ($deps = array()): Lista com o nome das dependências JavaScript
Versão ($ver = false): Versão do arquivo de Script
Posição: Parâmetro booleano que define se o arquivo será aberto no cabeçalho ou então, no rodapé. Se &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;, será adicionado ao cabeçalho. Se &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;, será adicionado no rodapé.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Abertura do Javascript&lt;/span&gt;
&lt;span class="nx"&gt;add_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wp_enqueue_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;toinnn_load_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toinnn_load_scripts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// jQuery&lt;/span&gt;
        &lt;span class="nx"&gt;wp_deregister_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;wp_register_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;//ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;wp_enqueue_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Bootstrap&lt;/span&gt;
        &lt;span class="nx"&gt;wp_register_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bs-scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https:/maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;wp_enqueue_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bs-scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abertura-de-arquivos-estaticos"&gt;
&lt;h2&gt;ABERTURA DE ARQUIVOS ESTÁTICOS&lt;/h2&gt;
&lt;p&gt;A função &lt;tt class="docutils literal"&gt;functions.php&lt;/tt&gt; é executada no processamento de página do back-end como também, do front-end. A abertura dos arquivos estáticos CSS e JavaScript que estamos estudando, deve ocorrer somente quando a renderização do &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;front-end&lt;/span&gt;&lt;/tt&gt; estiver sendo processada. Para isso, iremos utilizar a função &lt;tt class="docutils literal"&gt;is_admin()&lt;/tt&gt; a fim de sabermos se devemos ou não registrar os arquivos estáticos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;is_admin&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No código acima, estamos perguntando se o Wordpress está renderizando a parte administrativa. Porém, como estamos utilizando o operador de negaçao &lt;tt class="docutils literal"&gt;!&lt;/tt&gt;, a pergunta se inverte e assim, temos que a condição será verdadeira se e somente se, a renderização em questão não for da parte administrativa.&lt;/p&gt;
&lt;p&gt;Na sequência registramos uma ação com a função &lt;tt class="docutils literal"&gt;add_action()&lt;/tt&gt; para que uma função seja adicionada a fila de abertura dos arquivos de Script JavaScript.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;add_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wp_enqueue_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;toinnn_load_style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O primeiro parâmetro é o nome da interrupção, no caso, &lt;tt class="docutils literal"&gt;wp_enqueue_scripts&lt;/tt&gt;. Em seguida, passamos o nome da função que deve ser invocada na interrupção especificada, e por fim, definimos em qual lugar da fila de abertura dos arquivos estáticos que queremos adicionar a função.&lt;/p&gt;
&lt;p&gt;Nós adicinamos a abertura dos arquivos JavaScript na 13 posição, isto é, o Wordpress pode enfileirar a abertura de bibliotecas da posição 1 até 12 sem que haja qualquer conflito. Então, com a função &lt;tt class="docutils literal"&gt;add_action()&lt;/tt&gt; indicando a ordem na qual cada uma das funções que nós definimos deve ser invocada. Então, inicialmente abrimos os arquivos de Script e em seguida, abrimos os arquivos de CSS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-biblioteca-jquery"&gt;
&lt;h2&gt;A BIBLIOTECA &lt;tt class="docutils literal"&gt;JQuery&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;O Wordpress abre a biblioteca &lt;tt class="docutils literal"&gt;JQuery&lt;/tt&gt; nativamente, isto é, atualmente, todas instalações do Wordpress contém a biblioteca &lt;tt class="docutils literal"&gt;JQuery&lt;/tt&gt; por padrão.&lt;/p&gt;
&lt;p&gt;Em muitas situações é bastante útil que o &lt;tt class="docutils literal"&gt;JQuery&lt;/tt&gt; seja aberto automaticamente, porém, nem sempre isso será a melhor opção. Isso porque, podemos ter uma instalação do Wordpress com 3, 4, 10 anos e assim, pode acontecer da biblioteca JQuery não estar atualizada.&lt;/p&gt;
&lt;p&gt;Não é incomum encontrarmos uma instalação do Wordpress há 3 anos sem ser atualizada, até porque, muitas empresas utilizam somente o mínimo do CMS e assim, acabam não atualizando o framework.&lt;/p&gt;
&lt;p&gt;Tendo em vista esse problema de versões do &lt;tt class="docutils literal"&gt;JQuery&lt;/tt&gt;, é comum aos desenvolvedores de tema a desinstalação da versão nativa da biblioteca para que então, seja aberta a versão contida no tema ou então, contida em alguma CDN - o que é mais comum.&lt;/p&gt;
&lt;p&gt;Como estudado, para registrarmos uma biblioteca JavaScript, temos a função &lt;tt class="docutils literal"&gt;wp_register_script()&lt;/tt&gt;, da mesma forma, para removermos uma biblioteca, temos a função &lt;tt class="docutils literal"&gt;wp_deregister_script()&lt;/tt&gt;. Como parâmetro, basta informarmos o nome da biblioteca que desejamos remover o registro, por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;wp_deregister_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O código acima, está dizendo para o Wordpress que desejamos remover o JQuery que está registrado.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="codigo-completo-de-abertura-dos-arquivos-estaticos"&gt;
&lt;h2&gt;CÓDIGO COMPLETO DE ABERTURA DOS ARQUIVOS ESTÁTICOS&lt;/h2&gt;
&lt;p&gt;A seguir, temos o código da abertura das bibliotecas que compõem o framework Bootstrap e a sua dependência, o JQuery.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;is_admin&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// Load CSS&lt;/span&gt;
        &lt;span class="nx"&gt;add_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wp_enqueue_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;toinnn_load_style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;toinnn_load_style&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Bootstrap&lt;/span&gt;
                &lt;span class="nx"&gt;wp_register_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bs-styles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;wp_enqueue_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bs-styles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;// Theme Styles&lt;/span&gt;
                &lt;span class="nx"&gt;wp_register_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;theme-styles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;get_stylesheet_uri&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;wp_enqueue_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;theme-styles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Load Javascript&lt;/span&gt;
        &lt;span class="nx"&gt;add_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wp_enqueue_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;toinnn_load_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;toinnn_load_scripts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// jQuery&lt;/span&gt;
                &lt;span class="nx"&gt;wp_deregister_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;wp_register_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;wp_enqueue_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;// Bootstrap&lt;/span&gt;
                &lt;span class="nx"&gt;wp_register_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bs-scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;wp_enqueue_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bs-scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- d https://developer.wordpress.org/reference/functions/add_action/ --&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Atributos do Novo Tema Wordpress</title><link href="http://www.excript.com/wordpress/atributos-novo-tema-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/atributos-novo-tema-wordpress.html</id><summary type="html"></summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Bootstrap e Wordpress</title><link href="http://www.excript.com/wordpress/bootstrap-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/bootstrap-wordpress.html</id><summary type="html">&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;Bootstrap é um framework open-source para desenvolvimento frontend, desenvolvido pelo Twitter cujo objetivo é simplificar a construção de páginas web.&lt;/p&gt;
&lt;p&gt;A construção foi iniciada por Mark Otto e Jacob Thornton em meados de 2010 e inicialmente foi chamado de Twitter Blueprint. A meta inicial foi desenvolver uma ferramenta interna para a padronização dos serviços da empresa twitter.com. Isso porque, diferentes grupos adotavam diferentes frameworks e bibliocas fazendo com que os diversos serviços tivessem visuais diferentes e o pior, sem qualquer tipo de padronização do código.&lt;/p&gt;
&lt;p&gt;A primeira versão pública do framework foi lançada em 19 de agosto de 2011 e  recebeu o nome de Twitter Bootstrap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recursos"&gt;
&lt;h2&gt;RECURSOS&lt;/h2&gt;
&lt;p&gt;O framework Bootstrap oferece um conjunto de CSS e estes, definem desde a tipografia, até complexos campos de entrada.
Logo, nós temos que ao utilizar o framework, este irá aplicar um padrão à exibição de textos, tabelas, formulários, botões, e os principais controles que são utilizados na construção de uma aplicação web e/ou websites.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mobile-first"&gt;
&lt;h2&gt;MOBILE-FIRST&lt;/h2&gt;
&lt;p&gt;Mobile-First é a técnica onde desenvolve-se o leiaute inicialmente para dispositivos Mobile e em seguida, para as outras resoluções de tela.&lt;/p&gt;
&lt;p&gt;O padrão para o desenvolvimento de leiautes do Bootstrap é voltado para dispositivos móveis ou então, para dispositivos que possuem uma pequena tela. Em seguida, desenvolve-se para tablets, ou então, dispositivos que tenham uma tela de tamanho mediano e por fim, da-se o desenvolvimento para telas que possuem maior resolução. Essa característica é chamada de &amp;quot;Mobile First&amp;quot;, ou seja, inicialmente desenvolve-se para Mobile e em seguida para outras resoluções.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dependencias"&gt;
&lt;h2&gt;DEPENDENCIAS&lt;/h2&gt;
&lt;p&gt;O Bootstrap utiliza somente a biblioteca JQuery. Então, todas as vezes em que formos incluir o Bootstrap em nossa HTML, temos que antes, incluir a biblioteca JQuery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-metainformacao-viewport"&gt;
&lt;h2&gt;A METAINFORMAÇÃO &lt;tt class="docutils literal"&gt;viewport&lt;/tt&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=device-width, initial-scale=1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A viewport que é definida por padrão nas demonstrações do Bootstrap, definem que a largura inicial do documento, será a largura do dispositivo em que está sendo exibido  &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;width=device-width&lt;/span&gt;&lt;/tt&gt;. O valor da propriedade &lt;tt class="docutils literal"&gt;width&lt;/tt&gt; do &lt;tt class="docutils literal"&gt;viewport&lt;/tt&gt; pode ser alterada, porém, o framework Bootstrap também cuidará dessa definição pra gente.&lt;/p&gt;
&lt;p&gt;Em seguida, nós definimos que a escala de zoom do documento será igual a 1, ou seja, a página será exibida na proporção de 1 para 1 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;initial-scale=1&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;É possível impedir que o usuário dê zoom na página, porém, na maior parte das vezes não é interessante definirmos essa propriedade e até a documentação do Bootstrap diz para os desenvolvedores agirem com cautela. Para impedir o zoom, basta adicionarmos na viewport a instrução &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;user-scalable=no&lt;/span&gt;&lt;/tt&gt;, logo, a visualização não será escalável, ou seja, não será possível aumentar e diminuir o tamanho geral da página.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="classes-css-estruturais"&gt;
&lt;h2&gt;CLASSES CSS ESTRUTURAIS&lt;/h2&gt;
&lt;p&gt;O Twitter Bootstrap definiu 4 classes CSS como sendo estruturais, ou seja, elas não possuem uma visualização propriamente dita, porém, estas irão definir como que outras tags serão exibidas.&lt;/p&gt;
&lt;p&gt;Estas classes podem ser utilizadas com qualquer tag HTML, porém, as mesmas geralmente são utilizadas em TAGS &lt;tt class="docutils literal"&gt;div&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;A seguir, temos a lista das 4 classes estruturais:&lt;/p&gt;
&lt;blockquote&gt;
1 - .container
2 - .container-fluid
3 - .row
4 - .col&lt;/blockquote&gt;
&lt;p&gt;A classe &lt;tt class="docutils literal"&gt;.col&lt;/tt&gt; é constituida pelo conjutno de 48 classes a fim de definir as 4 dimensões reconhecidas pelo framework e a quantidade de unidades que cada classe irá ocupar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-classe-container"&gt;
&lt;h2&gt;A CLASSE &lt;tt class="docutils literal"&gt;.container&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;A classe &lt;tt class="docutils literal"&gt;.container&lt;/tt&gt; é a principal de todo documento e a mesma sempre estará definida na hierarquia mais alta da arvore de tags HTML. O objetivo de um container é ser o ponto inicial da construção dos documentos. Assim, os &lt;tt class="docutils literal"&gt;scripts&lt;/tt&gt; do framework irão utilizar o mesmo como sendo a base de construção.&lt;/p&gt;
&lt;p&gt;Todo documento que irá utilizar o framework Twitter Bootstrap deverá, obrigatoriamente, ter no mínimo uma tag com a classe container. Porém, o comum é que os documentos utilizem 3 vezes essa classe. Uma para definir o cabeçalho, outra para o corpo e uma última para definir o rodapé do documento.&lt;/p&gt;
&lt;p&gt;O framework não obriga a utilização de 3 tags num documento a fim de definir as 3 áreas comuns a maioria das págians Web, assim, essa é uma boa prática de desenvolvimento e que deve ser alterada, conforme a necessidade do projeto.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-classe-row"&gt;
&lt;h2&gt;A CLASSE &lt;tt class="docutils literal"&gt;.row&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;A classe &lt;tt class="docutils literal"&gt;.row&lt;/tt&gt; tem o objetivo de definir um segmento horizontal, isto é, definir uma área que seja capaz de receber componentes que somados utilizem 12 unidades. Então, é comum que a classe &lt;tt class="docutils literal"&gt;.row&lt;/tt&gt; seja a primeira filha da classe &lt;tt class="docutils literal"&gt;.container&lt;/tt&gt; e também, é comum que dentro desta, haja tags com a classe &lt;tt class="docutils literal"&gt;.col&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Assim, a estrutura básica de um documento será sempre um container, que contém uma ou mais linhas (row) e dentro desta, haverá a definição propriamente dita do sistema de 12 colunas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-classe-col"&gt;
&lt;h2&gt;A CLASSE &lt;tt class="docutils literal"&gt;.col&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;A classe &lt;tt class="docutils literal"&gt;.col&lt;/tt&gt; é constituida por um conjunto de 48 classes e representam o núcleo do sistema 12 colunas. É comum encontrarmos colunas dentro de linhas &lt;tt class="docutils literal"&gt;.row&lt;/tt&gt;, até porque, essa é a estrutura recomendada pelos desenvolvedores do framework.&lt;/p&gt;
&lt;p&gt;Assim, podemos imaginar que a classe &lt;tt class="docutils literal"&gt;.row&lt;/tt&gt; representa um segmento horizontal, enquanto que as classes &lt;tt class="docutils literal"&gt;.col&lt;/tt&gt; dividem esse segmento a fim de tornar o leiate ajustável às varias resoluções de tela.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alguns-conceitos-importantes-sobre-o-bootstrap"&gt;
&lt;h2&gt;ALGUNS CONCEITOS IMPORTANTES SOBRE O BOOTSTRAP&lt;/h2&gt;
&lt;p&gt;Algumas ideias que devem ser reforçadas quando iremos trabalhar com o framework Bootstrap.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A classe container e a classe container-fluid não possuem diferença quanto a função de servirem como um recipiente que recebe outros objetos. A diferença maior acaba sendo visual, até porque, o container-fluid ocupara toda área disponível.&lt;/li&gt;
&lt;li&gt;Todo segmento horizontal (row), como também, qualquer outro componente, deve estar, obrigatoriamente, dentro de um container. Até porque, todos os cálculos para o redimensionamento se baseara nos mesmo.&lt;/li&gt;
&lt;li&gt;Colunas devem ser filhas de linhas (row), então, podemos pensar que uma &lt;tt class="docutils literal"&gt;row&lt;/tt&gt; é um container exclusivo para os objetos colunas. Indiferente do conteúdo que será exibido numa linha, estes nunca devem estar contidos na &lt;tt class="docutils literal"&gt;row&lt;/tt&gt; propriamente dita, até porque, somente colunas devem ser filhas da classe &lt;tt class="docutils literal"&gt;row&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Resoluções de tela superior a 1200 exibiram o conteúdo conforme definido pela class lg ou então, que foi definida numa resolução abaixo da mesma.&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- d LINKS:
http://webdevacademy.com.br/tutoriais/ux/bootstrap-3-layouts-sistema-grids/
Data de lançamento 19 de agosto de 2011 - &lt;ref name=release-announcement&gt;{{cite web|last1=Otto|first1=Mark|title=Bootstrap from Twitter|url=https://blog.twitter.com/2011/bootstrap-twitter|website=Developer Blog|publisher=Twitter|date=19 August 2011}}&lt;/ref&gt; It has continued to be maintained by Mark Otto, Jacob Thornton, and a small group of core developers, as well as a large community of contributors.&lt;ref name=about&gt;{{cite web|title=About|url=http://getbootstrap.com/about/|website=Bootstrap}}&lt;/ref&gt;
tipografia - aurélio
1. Arte que compreende as várias operações conducentes à impressão dos textos, desde a criação dos caracteres à sua composição e impressão, de modo que resulte num produto gráfico ao mesmo tempo adequado, legível e agradável. [Cf. imprensa (2).] --&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Criacao de Novos Temas Wordpress</title><link href="http://www.excript.com/wordpress/criacao-novo-tema-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/criacao-novo-tema-wordpress.html</id><summary type="html">&lt;div class="section" id="criando-um-novo-tema"&gt;
&lt;h2&gt;CRIANDO UM NOVO TEMA&lt;/h2&gt;
&lt;p&gt;Há diversas maneira para iniciarmos o desenvolvimento de um tema para o Wordpress. Fato é, que não existe maneira correta, porém, existem pequenas bibliotecas ou então, conjuntos de arquivos que podemos utilizar para inicar os desenvolvimento.&lt;/p&gt;
&lt;p&gt;Também é comum, desenvolvermos um tema a partir de outro, assim, ao invés de ter que ir adicionando as chamadas à API ou então, criar cada arquivo referente a cada parte do tema, podemos utilizar qualquer outro plugin.&lt;/p&gt;
&lt;p&gt;Uma forma rápida para implementarmos um novo tema, é utilizarmos um dos 3 temas que estão contidos no diretório &lt;tt class="docutils literal"&gt;theme&lt;/tt&gt; da versão de download do wordpress.org.&lt;/p&gt;
&lt;p&gt;Nesse momento, o nosso objetivo não é somente desenvolver um tema, mas sim, entender e estudar a API como também, tomarmos conhecimentos dos principais nomes de métodos, funções e variáveis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="criando-os-arquivos"&gt;
&lt;h2&gt;CRIANDO OS ARQUIVOS&lt;/h2&gt;
&lt;p&gt;Para iniciarmos o trabalho, vá paraa pasta &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wordopress/wp-theme&lt;/span&gt;&lt;/tt&gt; e nesta, crie uma nova pasta. De preferência, utilize o nome do tema como nome da pasta. Essa é sem dúvida a melhor maneira de organizarmos o nosso códigos e também, distinguir entre os vários temas que em breve teremos.&lt;/p&gt;
&lt;p&gt;Para o nosso estudo, vamos criar a pasta de nome &lt;tt class="docutils literal"&gt;wpstrap&lt;/tt&gt;. Certifique-se de ter criado a pasta no mesmo local do path a seguir: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wordopress/wp-theme/wpstrap&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Agora, vamos criar 2 arquivos. O primeiro, será a nossa folha de estilo, de nome &lt;tt class="docutils literal"&gt;style.css&lt;/tt&gt; e o segundo, o arquivo de entrada para a renderizaçaõ do nosso tema, o arquivo &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt;.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Agora, as 4 primeiras definições que temos de entender, assimilar e gravar.&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic simple"&gt;
&lt;li&gt;Todo tema está contido dentro de uma pasta&lt;/li&gt;
&lt;li&gt;Na raíz de todo tema haverá um arquivo &lt;tt class="docutils literal"&gt;CSS&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Dentro do arquivo &lt;tt class="docutils literal"&gt;CSS&lt;/tt&gt; é que iremos definir as propriedades do nosso tema, como por exemplo, o seu nome.&lt;/li&gt;
&lt;li&gt;O tema será inicializado com a importação do arquivo &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt;, por isso, esse arquivo também é obrigatório.&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="definindo-o-style-css"&gt;
&lt;h2&gt;DEFININDO O &lt;tt class="docutils literal"&gt;style.css&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Cada tema do Wordpress possui, obrigatoriamente, um arquivo de nome &lt;tt class="docutils literal"&gt;style.css&lt;/tt&gt;. Não é necessário nenhum código CSS, porém, será através deste arquivo que o nosso tema será reconhecido dentro da instalação do dashboard do Wordpress.&lt;/p&gt;
&lt;p&gt;Dentro do &lt;tt class="docutils literal"&gt;style.css&lt;/tt&gt;, nas primeiras linhas, vamos que declarar as propriedades do nosso tema, como temos no código abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;/*&lt;/span&gt;
&lt;span class="x"&gt;Theme Name: PreXcript&lt;/span&gt;
&lt;span class="x"&gt;Theme URI: http://excript.com&lt;/span&gt;
&lt;span class="x"&gt;Author: Cláudio eXcript (@eXcript)&lt;/span&gt;
&lt;span class="x"&gt;Author URI: http://excript.com/&lt;/span&gt;
&lt;span class="x"&gt;Description: Estudo dirigido à criação e desenvolvimento de temas.&lt;/span&gt;
&lt;span class="x"&gt;Version: 1.0&lt;/span&gt;
&lt;span class="x"&gt;License: GNU General Public License v2 or later&lt;/span&gt;
&lt;span class="x"&gt;License URI: http://www.gnu.org/licenses/gpl-2.0.html&lt;/span&gt;
&lt;span class="x"&gt;Tags: eXcript&lt;/span&gt;
&lt;span class="x"&gt;Text Domain: eXcript&lt;/span&gt;
&lt;span class="x"&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="lista-das-tags-a-serem-definidas-no-style-css"&gt;
&lt;h2&gt;LISTA DAS TAGS A SEREM DEFINIDAS NO &lt;tt class="docutils literal"&gt;style.css&lt;/tt&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Theme name:&lt;/strong&gt; Nome do tema&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Theme URI:&lt;/strong&gt; Endereço do site do desenvolvedor&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Author:&lt;/strong&gt; Nome do autor do tema ou da empresa&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Author URI:&lt;/strong&gt; Endereço do site do autor ou empresa&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Descrição breve e objetiva&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Version:&lt;/strong&gt; Versão do tema&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;License:&lt;/strong&gt; A lincença na qual o tema está sendo disponibilizado&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;License URI:&lt;/strong&gt; Endereço para as regras da licença&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Lista de tags para ser utilizado quando o tema for disponibilizado no site oficial&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text Domain:&lt;/strong&gt; String que será utilizada no momento em que fores disponibilizar o tema em outras versões. Normalmente, utilizamos o apelido que utilizamos quando enviamos o tema para o repositorio wordpress.org&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="testando-o-novo-tema"&gt;
&lt;h2&gt;TESTANDO O NOVO TEMA&lt;/h2&gt;
&lt;p&gt;Após criamos o arquivo &lt;tt class="docutils literal"&gt;style.css&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt; dentro da pasta do nosso tema e também, definirmos o nome e outros atributos do nosso tema dentro do CSS, já podemos testar o nosso tema. Então, acesse o &lt;tt class="docutils literal"&gt;Dashboard&lt;/tt&gt;, clique em &lt;tt class="docutils literal"&gt;Aparência&lt;/tt&gt; e depois &lt;tt class="docutils literal"&gt;Tema&lt;/tt&gt;. Se você executos os passos anteriores corretamente, o nosso tema já estara aparecendo na parte administrativa da instalação do Wordpress.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ativando-o-novo-tema"&gt;
&lt;h2&gt;ATIVANDO O NOVO TEMA&lt;/h2&gt;
&lt;p&gt;Para que possamos desenvolver e ao mesmo tempo ir testando no navegador, temos que ativar o nosso tema dentro do Dashboard. Então, como via de regra, esses sempre serão os passos iniciais que teremos de dar para criar um novo tema. Agora, ative o tema que estamos criando para que as próximas vezes em que acessarmos o Wordpress, o nosso tema seja exibido com as últimas modificações.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="definindo-uma-imagem-para-o-tema"&gt;
&lt;h2&gt;DEFININDO UMA IMAGEM PARA O TEMA&lt;/h2&gt;
&lt;p&gt;O nosso tema já está sendo exibido na tela de temas do &lt;tt class="docutils literal"&gt;Dashboard&lt;/tt&gt;, porém, nenhuma imagem é exibida. Para definirmos a imagem que deve ser exibida, ou seja, a cara do nosso tema, temos que colocar a imagem na raiz do directorio do diretório do tema com o nome de &lt;tt class="docutils literal"&gt;screenshot.png&lt;/tt&gt; e com as dimensões de 880x660.&lt;/p&gt;
&lt;p&gt;Ainda que não seja obrigatório que a imagem seja do tipo PNG, na documentação do Wordpress, esse é o formato sugerido. Com a resolução da imagem ocorre o mesmo, não é obrigatório que a mesma deva possuir as dimensões 880x660, porém, essas são as dimensões recomendadas pela documetação oficial.&lt;/p&gt;
&lt;blockquote&gt;
.&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Criando o Leiaute do Tema Wordpress</title><link href="http://www.excript.com/wordpress/criando-leiaute-tema-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/criando-leiaute-tema-wordpress.html</id><summary type="html">&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;O Wordpress disponibiliza uma API para que possamos desenvolver os nossos próprios temas. Tudo que precisamos para desenvover qualquer tipo de tema está contido em qualquer instação do Wordpress.&lt;/p&gt;
&lt;p&gt;Num primeiro momento, vamos estudar a estrutura fundamental da API para desenvolvimento de temas para o Wordpress e em seguida, começaremos a adicionar o HTML e o CSS junto ao código PHP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="estrutura-de-arquivos-e-diretorio"&gt;
&lt;h2&gt;ESTRUTURA DE ARQUIVOS E DIRETÓRIO&lt;/h2&gt;
&lt;p&gt;Para que possamos desenvover plugins e temas para o Wordpress não é necessário que conheçamos a estrutura de pastas, os arquivos PHP e seus códigos. Isso porque, tanto no desenvolvimento de um simples tema até o desenvolvimento de um plugin complexo, a interação com a instalação do Wordpress se dará através da API disponibilizada para este fim.&lt;/p&gt;
&lt;p&gt;Ainda assim, vale a pena entender-mos a estrutura, seus principais arquivos, funções e classes. Por isso, agora, estudaremos rapidamente o que há de mais importante na estrutura de diretórios e alguns arquivos do Wordpress.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="estrutura"&gt;
&lt;h2&gt;ESTRUTURA&lt;/h2&gt;
&lt;p&gt;Abaixo temos a estrutura de diretórios de uma instalação do Wordpress. A raiz é &amp;quot;wordpress&amp;quot; mas poderia ser qualquer outro nome, porém, os arquivos que estão contidos dentro do diretório raíza não podem ter seus nomes alterados.&lt;/p&gt;
&lt;p&gt;É importante observar que a nomenclatura dos diretórios e pastas é case-sensitive, ou seja, a letra &amp;quot;A&amp;quot; maiúscula é diferente da letra &amp;quot;a&amp;quot; minúscula.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;-wordpress/&lt;/dt&gt;
&lt;dd&gt;├── wp-admin/
├── wp-content/
├── wp-includes/
├──
├── ...
├──
├── .htaccess
├── index.php
├── wp-blog-header.php&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="diretorio-wp-admin"&gt;
&lt;h2&gt;DIRETÓRIO &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-admin&lt;/span&gt;&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;O diretório &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-admin&lt;/span&gt;&lt;/tt&gt; contém os arquivos do dashboard do Wordpress, ou seja, nesta pasta nós temos a programação do back-end. Todas as funções administrativas ou então, qualquer função que esteja relacionada com o Wordpress, criação de páginas, criação de postagens, seleção de qual tema será utilizado, os widges dentre outros, estão contidos dentro desse diretório.&lt;/p&gt;
&lt;p&gt;Salvo se você estiver criando um &lt;tt class="docutils literal"&gt;fork&lt;/tt&gt; (versão própria) do Wordpress é que necessitaras alterar o código de algum arquivo contido no diretório &amp;quot;wp-admin&amp;quot;. E também, é altamente desancolhavel que você faça alterações, até porque, quando fores atualizar o framework, os arquivos que havias alterados serão sobreescritos e assim, perderas o seu código e provavelmente, a sua instalação do Wordpress deixara de funcionar. Então, salvo em casos especiais é que iremos fazer alterações na pasta &amp;quot;wp-adim&amp;quot;, porém, é super recomendável que você estude e entenda o funcionamento.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diretorio-wp-includes"&gt;
&lt;h2&gt;DIRETÓRIO &lt;tt class="docutils literal"&gt;wp_includes&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Neste diretório estão contidos o código do núcleo do Wordpress (core). Então, a maior parte das classes e funções que trabalhamos estão definidas em arquivos contidos neste diretório.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diretorio-wp-content"&gt;
&lt;h2&gt;DIRETÓRIO &lt;tt class="docutils literal"&gt;wp_content&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;O diretório &lt;tt class="docutils literal"&gt;wp_content&lt;/tt&gt; contém os temas disponíveis, os plugins baixados e as imagens que foram enviadas. Então, &amp;quot;wp_content&amp;quot; faz juz a seu nome, até porque, é a pasta que contém uma parte do conteúdo das nossas páginas. (Os textos, descrições, títuloes e etc são armazenados dentro do banco de dados, então, você não encontrará esse tipo de informação me qualquer diretório ou subdiretório de uma instalação do wordpress).&lt;/p&gt;
&lt;p&gt;Dentro do diretório &lt;tt class="docutils literal"&gt;wp_content&lt;/tt&gt;, temos outros 3 subdiretórios, são eles:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;-wp-content/&lt;/dt&gt;
&lt;dd&gt;├── languages/
├── themes/
├── plugins/
├── upgrade/
├── uploads/&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="diretorio-themes"&gt;
&lt;h2&gt;DIRETÓRIO &lt;tt class="docutils literal"&gt;themes&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;O diretório &amp;quot;theme&amp;quot;  contém todos os temas que estão instalados em nosso Wordpress. Por padrão, quando baixamos o arquivo compactado do site do wordpress.org - &lt;a class="reference external" href="http://wordpress.org"&gt;http://wordpress.org&lt;/a&gt;, o mesmo vem com 3 temas, são eles:&lt;/p&gt;
&lt;blockquote&gt;
twentyfifteen
twentyfourteen
twentythirteen&lt;/blockquote&gt;
&lt;p&gt;Esses 3 temas que que vem por padrão tem o objetivo de orientar o desenvolvimento de temas, e por isso, os mesmo são bastante simples - para que consigamos entender facilmente.
É comum programadores personalizarem seus temas partindo de um desses 3 modelos.&lt;/p&gt;
&lt;p&gt;Então, até agora, a informação mais importante para o nosso estudo é saber que todos os temas instalados estão contidos no diretório &amp;quot;wp-content/themes/nome-do-tema&amp;quot;. A segunda, é que TODO tema está contido dentro de uma única pasta.&lt;/p&gt;
&lt;p&gt;Numa instalação do Wordpress, podemos ter instalados quantos temas desejarmos, porém, só é possível ativarmos um tema por vez. Toda instalação do Wordpress em funcionamento, terá, obrigatoriamente um tema, ou seja, se acessarmos o nosso site e não houver um tema disponivel, sera levantado uma exceção.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diretorio-plugins"&gt;
&lt;h2&gt;DIRETÓRIO &lt;tt class="docutils literal"&gt;plugins&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;O diretórios  &lt;tt class="docutils literal"&gt;plugins&lt;/tt&gt; possui um funcionamento semelhante ao diretório &lt;tt class="docutils literal"&gt;theme&lt;/tt&gt;, porém, é possível, ainda que pouco provável, rodarmos uma instancia do Wordpress sem qualque Plugin ativado ou mesmo, instalado.&lt;/p&gt;
&lt;p&gt;Assim, como o nome do diretório sugere, todos os plugin que estiverem instalados numa instância do Wordpress, estará, obrigatoriamente, contido no diretório plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diretorio-uploads"&gt;
&lt;h2&gt;DIRETÓRIO &lt;tt class="docutils literal"&gt;uploads&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Todos os arquivos que fizermos &lt;tt class="docutils literal"&gt;upload&lt;/tt&gt; será armazenado por padrão, no diretório &amp;quot;wp-content/uploads&amp;quot;. Dentro do diretório &lt;tt class="docutils literal"&gt;uploads&lt;/tt&gt; será criado um subdiretório para cada ano. Dentro deste, haverá subdiretórios para cada mês e dentro deste, haverá subdiretório para cada dia em que enviamos algum arquivo para o servidor.&lt;/p&gt;
&lt;p&gt;O nome do arquivo que enviamos será preservado. Caso o arquivo enviado seja por exemplo, uma imagem, o Wordpress irá criar 2 outras imagens menores, também chamadas de &amp;quot;thumbnails&amp;quot;. Estas seguirão a nomenclatura:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;nome_do_arquivo.png&lt;/li&gt;
&lt;li&gt;nome_do_arquivo-150x150.png&lt;/li&gt;
&lt;li&gt;nome_do_arquivo-300x174.png&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Então, em cada situação o Wordpress irá abrir um determinado tipo de arquivo, a fim de melhor servir os usuários.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diretorio-upgrade"&gt;
&lt;h2&gt;DIRETÓRIO &lt;tt class="docutils literal"&gt;upgrade&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;O diretório &lt;tt class="docutils literal"&gt;upgrade&lt;/tt&gt; será utilizado todas as vezes em que formos atualizar a instalação do Wordpress. A pasta &amp;quot;upgrade&amp;quot;, será utilizada para o armazenamento temporário de diversos arquivos, dentre eles, o download da nova versão do Wordpress, como também, o respectivo backup que será realizado antes que a atualização seja processada.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Criando um Novo Projeto Wordpress</title><link href="http://www.excript.com/wordpress/criando-novo-projeto-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/criando-novo-projeto-wordpress.html</id><summary type="html">&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;Para iniciarmos o desenvolvimento, temos de baixar:
1) Bootstrap
2) JQuery&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="baixando-o-bootstrap"&gt;
&lt;h2&gt;BAIXANDO O BOOTSTRAP&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Ao acessarmos o site oficial do Bootstrap &lt;a class="reference external" href="http://getbootstrap.com/getting-started/"&gt;http://getbootstrap.com/getting-started/&lt;/a&gt;, temos a disposição 3 links, são eles respectivamente:&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic simple"&gt;
&lt;li&gt;Download Bootstrap&lt;/li&gt;
&lt;li&gt;Download Source&lt;/li&gt;
&lt;li&gt;Download Sass&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="download-bootstrap"&gt;
&lt;h2&gt;Download Bootstrap&lt;/h2&gt;
&lt;p&gt;Este é o link para o desenvolvimento tradicional, ou seja, para desenvolver-mos os nossos sites utilizando HTML e CSS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="download-source"&gt;
&lt;h2&gt;Download Source&lt;/h2&gt;
&lt;p&gt;Neste link temos o código-fonte do framework Bootstrap. Essa é a versão na qual o Bootstrap é construído, ou seja, através dos códigos desse link é que podemos gerar o CSS, JavaScript e o HTML final.&lt;/p&gt;
&lt;p&gt;Se você está iniciando agora no desenvolvimento Web, é recomendado o download da primeira opções, até porque, você precisara de conhecimentos avançados sobre CSS, JavaScript (JQuery).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="download-sass"&gt;
&lt;h2&gt;Download Sass&lt;/h2&gt;
&lt;p&gt;Neste link temos uma versão do framework Bootstrap para uso com a linguagem Sass. Sass é uma linguagem para desenvolvermos CSS de maneira prática. Então, o código Sass é convertido em CSS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;BAIXANDO O BOOTSTRAP&lt;/h2&gt;
&lt;p&gt;No site do Bootstrap &lt;a class="reference external" href="http://getbootstrap.com/getting-started/"&gt;http://getbootstrap.com/getting-started/&lt;/a&gt; clique na primeira opção, de nome &amp;quot;Donwload Bootstrap&amp;quot;. Em seguida, será iniciado o download de um arquivo *.zip cujo nome é bootstrap + a versão do framework.&lt;/p&gt;
&lt;p&gt;Terminado o download descompacte e renomeie a pasta raíz que será gerada para &amp;quot;bstrap&amp;quot;. Feito isso, você deverá ter uma estrutura de diretórios semelhante a:&lt;/p&gt;
&lt;blockquote&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;-bstrap/&lt;/dt&gt;
&lt;dd&gt;├── css/
├── js/
└── fonts/&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="baixando-o-jquery"&gt;
&lt;h2&gt;BAIXANDO O JQuery&lt;/h2&gt;
&lt;p&gt;Para fazer o download do JQuery, acesse o site oficial &lt;a class="reference external" href="http://jquery.com/download/"&gt;http://jquery.com/download/&lt;/a&gt; e baixe a última versão da biblioca. Tome cuidado para não baixar a versão 1.x, até porque, essa será a primeira opção de download. Então, certifique-se de fazer o download da versão 2.x.&lt;/p&gt;
&lt;p&gt;A diferença entre as versões 1.x e 2.x é o suporte ao navegador Internet Explorer versões 6, 7 e 8. A API entre ambas versões é a praticamente a mesma, assim o que diferencia as duas versões são o suporte aos navedores antigos e que já estão em desuso. Então, salvo se o seu projeto realmente precisar suportar os navedores antigos é que você deve utilizar a versão 1.x.&lt;/p&gt;
&lt;p&gt;Clique no link &amp;quot;Download the compressed, production jQuery 2.x&amp;quot; e em seguida, será iniciado o download de um arquivo com a extensão *.js.&lt;/p&gt;
&lt;p&gt;Observe que para cada versão do JQuery há 3 arquivos disponível para download, são eles:
- Download the compressed, production jQuery 1.x/2.x
- Download da versão comprimida/compactada jQuery 1.x/2.x&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Download the uncompressed, development jQuery 1.x/2.x&lt;/li&gt;
&lt;li&gt;Download da versão descomprimida/descompactada jQuery 1.x/2.x&lt;/li&gt;
&lt;li&gt;Download the map file for jQuery 1.x/2.x&lt;/li&gt;
&lt;li&gt;Download do arquivo de mapeamento for jQuery&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="estrutura-de-projeto"&gt;
&lt;h2&gt;ESTRUTURA DE PROJETO&lt;/h2&gt;
&lt;p&gt;Cada projeto em que formos utilizar o framework bootstrap, terá a estrutura de diretórios e os arquivos conforme vimos acima. E também, em cada arquivo HTML que utilizará o framework bootstrap, será necessário fazer referência aos arquivos contidos nessa estrutura.&lt;/p&gt;
&lt;!-- FONTES: JavaScript Maps Source: http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/ --&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Definindo o HTML do Tema Wordpress</title><link href="http://www.excript.com/wordpress/definindo-html-tema-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/definindo-html-tema-wordpress.html</id><summary type="html"></summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Depurando o Wordpress</title><link href="http://www.excript.com/wordpress/depurando-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/depurando-wordpress.html</id><summary type="html"></summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Hierarquia de Templates Wordpress</title><link href="http://www.excript.com/wordpress/hierarquia-templates-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/hierarquia-templates-wordpress.html</id><summary type="html">&lt;div class="section" id="template-hierarchy"&gt;
&lt;h2&gt;TEMPLATE HIERARCHY&lt;/h2&gt;
&lt;p&gt;Definição da ordem utilizada pelo Wordpress para decidir qual &lt;tt class="docutils literal"&gt;Template file&lt;/tt&gt; será aberto e processado para renderizar determinado conteúdo. O Wordpress definiu uma estrutura especializada que será avaliada antes de definir qual template utilizar para os diversos tipos de conteúdos. O nível mais baixo da hierarquia é o &lt;tt class="docutils literal"&gt;Template file&lt;/tt&gt; &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="visao-geral-da-utilizacao-de-templates-e-tags"&gt;
&lt;h2&gt;VISÃO GERAL DA UTILIZAÇÃO DE TEMPLATES E TAGS&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="index-php"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Este é o &lt;tt class="docutils literal"&gt;template file&lt;/tt&gt; mais importante e o único obrigatório para executarmos um tema. Indifente do conteúdo ou programação contida no &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt; este será o ponto de entrada na ausência de outros templates.
É importante entender que a função principal do template &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt; não é exibir a lista de postagens, mas sim, servir como template de reserva na ausência de algum outro template.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="style-css"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;style.css&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Arquivo necessário para que o tema funcione, até porque, é dentro do &lt;tt class="docutils literal"&gt;style.css&lt;/tt&gt; que colocamos as informações sobre o nosso tema, como por exemplo, nome do tema, autor, versão e etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rtl-css"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;rtl.css&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;The right-to-left stylesheet é incluido automaticamente no sitge caso a direção do texto seja da direita para a esquerda.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="comments-php"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;comments.php&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Este é o &lt;tt class="docutils literal"&gt;template file&lt;/tt&gt; onde iremos definir a lista de comentários de uma página ou postagem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="front-page-php"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;front-page.php&lt;/span&gt;&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Este é o pronto de entrada da raiz de todo website Wordpress. Porém, o template &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;front-page.php&lt;/span&gt;&lt;/tt&gt; só será invocado, se e somente se, a configuração em Admin &amp;gt; Configurações &amp;gt; Leitura estiver definindo uma página estática. Ou seja, o template &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;front-page.php&lt;/span&gt;&lt;/tt&gt; tem o objetivo de utilizar uma página como sendo a frente do website, enquanto que o template &lt;tt class="docutils literal"&gt;home.php&lt;/tt&gt; tem o objetivo de ser o ponto de entrada do blog, mostrando assim, a lista dos últimos posts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="home-php"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;home.php&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Template que exibe a lista das últimas postagens do blog. Este template deve ser entendindo como o ponto de entrada do blog. Mesmo que o template &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt; venha a desempenhar a mesma função e até mesmo, possua o mesmo código que o template &lt;tt class="docutils literal"&gt;home.php&lt;/tt&gt;, a função &lt;em&gt;principal&lt;/em&gt; do &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt; é servir como &lt;tt class="docutils literal"&gt;fallback&lt;/tt&gt;, ou seja, como o template de reserva caso seja necessário renderizar um template que não esteja definido (programado).&lt;/p&gt;
&lt;p&gt;É importante observar que este template só é invocado quando o template &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;front-page.php&lt;/span&gt;&lt;/tt&gt; não estiver definido ou então, quando não houver uma página estática definida em Admin &amp;gt; Configurações &amp;gt; Leitura.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="header-php"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;header.php&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;s``Template file`` que contém o cabeçalho do documento HTML do nosso site. Neste arquivo, é onde colocaremos as meta tags do HTML, bem como os &lt;tt class="docutils literal"&gt;assets&lt;/tt&gt; que devem ser abertos no carregamento da página.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="single-php"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;single.php&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Template que será invocado quando for necessário renderizar uma postagem em especifico.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="single-post-type-php"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;single-{post-type}.php&lt;/span&gt;&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Template especializado e que tem precedência ao template &lt;tt class="docutils literal"&gt;single.php&lt;/tt&gt;. É neste lugar onde iremos programar, por exemplo, uma postagem que é do tipo imagem, ou book, link e etc. Então, este é um template especializado em que podemos personalizar as postagens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="archive-post-type-php"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;archive-{post-type}.php&lt;/span&gt;&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Este templape será utilizado nas solicitações para exibição, por exemplo, de uma imagem ou então, de algum outro arquivo que disponibilizamos através do Wordpress. Caso este template não esteja definido, o Wordpress irá utilizar o template genérico &lt;tt class="docutils literal"&gt;archive.php&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="page-php"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;page.php&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Utilizado para renderizar a exibição de uma Página.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="page-slug-php"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;page-{slug}.php&lt;/span&gt;&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;O Wordpress irá inicialmente, tentar renderizar um conteúdo de uma página especifica com o template especifico, que podemos definir através deste template. Caso o mesmo não exista, a página será renderizada com o template de página genérico.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="category-php"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;category.php&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;O template &lt;tt class="docutils literal"&gt;category&lt;/tt&gt; é utilizado quando é necessário exibir as postagens por categorias.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tag-php"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;tag.php&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;O template &lt;tt class="docutils literal"&gt;tag&lt;/tt&gt; é utilizado quando é necessário exibir as postagens por uma determinada &lt;tt class="docutils literal"&gt;tag&lt;/tt&gt;.&lt;/p&gt;
&lt;!-- taxonomy.php
The taxonomy term template is used when a visitor requests a term in a custom taxonomy.
- author.php
The author page template is used whenever a visitor loads an author page.
date.php
The date/time template is used when posts are requested by date or time. For example, the pages generated with these slugs:
http://example.com/blog/2014/
http://example.com/blog/2014/05/
http://example.com/blog/2014/05/26/
- archive.php
The archive template is used when visitors request posts by category, author, or date. Note: this template will be overridden if more specific templates are present like category.php, author.php, and date.php.
- search.php
The search results template is used to display a visitor’s search results.
attachment.php
The attachment template is used when viewing a single attachment like an image, pdf, or other media file.
- image.php
The image attachment template is a more specific version of attachment.php and is used when viewing a single image attachment. If not present, WordPress will use attachment.php instead.
- 404.php
The 404 template is used when WordPress cannot find a post, page, or other content that matches the visitor’s request. --&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Introducao ao Desenvolvimenot de Temas para Wordpress</title><link href="http://www.excript.com/wordpress/introducao-desenvolvimento-temas.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/introducao-desenvolvimento-temas.html</id><summary type="html"></summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Lista de Postagens do Wordpress</title><link href="http://www.excript.com/wordpress/lista-postagem-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/lista-postagem-wordpress.html</id><summary type="html"></summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Menus do Wordpress</title><link href="http://www.excript.com/wordpress/menus-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/menus-wordpress.html</id><summary type="html"></summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>PHPStorm para desenvolvimento Wordpress</title><link href="http://www.excript.com/wordpress/phpstorm-desenvolvimento-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/phpstorm-desenvolvimento-wordpress.html</id><summary type="html">&lt;div class="section" id="phpstorm"&gt;
&lt;h2&gt;PHPStorm&lt;/h2&gt;
&lt;p&gt;A IDE PHPStorm é a ferramenta mais utilizada no desenvolvimento com a linguagem PHP. Com a mesma, conseguimos facilmente criar novos arquivos HTML, JS, PHP e também, conseguimos facilmente depurar scripts, tanto PHP como também, scripts JS.&lt;/p&gt;
&lt;p&gt;Existem versões disponíveis para Windows, Linux e Mac.&lt;/p&gt;
&lt;p&gt;Obviamente, para programar em PHP, não é necessário a utilização de IDE, porém, quando fazemos uso de uam, conseguimos evitar uma série de erros e também, agilizar tarefas rotineiras.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Primeiros Elementos do Bootstrap</title><link href="http://www.excript.com/wordpress/primeiro-elemento-bootstrap.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/primeiro-elemento-bootstrap.html</id><summary type="html">&lt;div class="section" id="principios-do-bootstrap"&gt;
&lt;h2&gt;PRINCIPIOS DO BOOTSTRAP&lt;/h2&gt;
&lt;p&gt;Trabalhar com o framework bootstrap, em suma, significa, utilizar as classes CSS que o mesmo disponibiliza. Isso não significa que o framework é composto por somente definições CSS, mas sim, de que as classes CSS serão acessadas através de JavaScript para que sejam definidas as funções de cada componente ou parte do framework.&lt;/p&gt;
&lt;p&gt;É importante que saibamos desde o inícios, de que os componentes contidos no framework funcionam de maneira análoga, logo, quando entendemos o princípio da biblioteca, o mesmo valera para todas as classes.&lt;/p&gt;
&lt;p&gt;Podemos dizer, que o framework está construido sob 2 pilares, porém, se analisarmos estes contextualmente, acabaremos por perceber que há um único conceito, que nos caso, é o sistema de Grid (Grid System).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sistema-de-grid"&gt;
&lt;h2&gt;SISTEMA DE GRID&lt;/h2&gt;
&lt;p&gt;O sistema de grid do bootstrap tem o objetivo de ajustar e reordenar nosso documento HTML conforme a resolução de tela em que o mesmo será exibido. Dessa forma, conseguimos desenvolver um único leiaute e este se ajustara conforme a resolução em que o mesmo for exibido.&lt;/p&gt;
&lt;p&gt;A capacidade de mutação conforme a resolução e tamanho de tela, deve-se ao sistema de grid que proporciona ao desenvolvedor, a capacidade de escrever um leiaute se valendo de diversas combinação de classes CSS que irão servir como base para o sistema de Grid no momento da renderização do framework.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="processo-de-renderizacao"&gt;
&lt;h2&gt;PROCESSO DE RENDERIZAÇÃO&lt;/h2&gt;
&lt;p&gt;O processo de renderização inicia após o download do HTML, CSS e JavaScript de cada página a ser exibida. A grosso modo, podemos dizer que o BS percorre todas as TAGS HTML do documento que está sendo renderizado buscando identificar onde estão definidas as principais classes, conforme a lista a seguir:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;.container ou .container-fluid&lt;/li&gt;
&lt;li&gt;.row&lt;/li&gt;
&lt;li&gt;.col&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para entender o processo e como o cálculo é realizado, vamos partir de um ambiente perfeito, isto é, um ambiente onde as classes estão definidas de maneira correta.&lt;/p&gt;
&lt;p&gt;Inicialmente, é preciso definir cada container, até porque, esse é o topo da hierarquia da arvore de tags. Em seguida, define-se as linhas, no caso, as as tags HTML que são da classes &lt;tt class="docutils literal"&gt;.row&lt;/tt&gt; e que são filhas diretas de cada container.
Como sabemos, dentro de cada &lt;tt class="docutils literal"&gt;.row&lt;/tt&gt; haverá um conjunto de elementos pertencentes a classe &lt;tt class="docutils literal"&gt;.col&lt;/tt&gt; e assim, de maneira recursiva, todo documento é construido e classificado.&lt;/p&gt;
&lt;p&gt;Após a montagem da árvore de TAGS e a respectiva classificação conforme a classe definida é que o documento será renderizado. Assim, a montagem ser dará conforme o menor tamanho de tela possível se valendo das menores dimensões das TAGS CSS definidas, ou seja, a largura do documento será baseado no cálculo entre a dimensão da menor resolução e a menor proporção que foi definida através da utilização das classes &lt;tt class="docutils literal"&gt;.col&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Ainda que não estejamos trabalhando diretamente com proporção, o significado de nomes de cada classe &lt;tt class="docutils literal"&gt;.col&lt;/tt&gt; CSS acaba por representar uma constante proporcional.&lt;/p&gt;
&lt;p&gt;Após o documento ser definido utilizando a menor medida possível, será verificado a possibilidade de utilizar uma medida proporcional maior, caso a dimensão do dispositivo permita e também, caso outras classes estejam definidas dentro da TAG que está sendo renderizada.&lt;/p&gt;
&lt;p&gt;Ou seja, se tivermos uma &lt;tt class="docutils literal"&gt;div&lt;/tt&gt; que contenha as TAGS &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.col-xs-3&lt;/span&gt;&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.col-md-6&lt;/span&gt;&lt;/tt&gt;, primeiro a TAG que representa a menor dimensão será montada, em seguida, caso seja necessário e caso o sistema permita [a dimensão permita], a &lt;tt class="docutils literal"&gt;div&lt;/tt&gt; será redimensionada para ser utilizado uma TAG que represente uma resolução de tela maior.&lt;/p&gt;
&lt;p&gt;Esse sistema de montagem, do menor para o maior, é chamado de Mobile-First e este conceito, parte da premissa de que se um documento pode ser exibido num dispositivo pequeno, este também poderá ser exibido num dispositivo maior, sem que haja qualquer alteração.
Assim, as páginas são programadas para serem exibidas no menor dispositivo, mas podem ser facilmente definida a fim de serem exibidas numa resolução maior. Para isso, ou seja, para que se utilize um mesmo código e que se adapte da menor até a maior resolução, compete ao programador, a utilização de combinações de classes &amp;quot;.col&amp;quot; a fim de definir o modo de exibição em cada resolução.&lt;/p&gt;
&lt;p&gt;Por fim, deve-se entender que na menor resolução, será utilizado a menor definição. Da mesma forma acontecerá com a maior dimensão, será utilizada a maior definição. Escrevendo a mesma frase porém, se valendo da nomenclatura de classes CSS, a menor exibição é representado pela classe &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;col-xs-&lt;/span&gt;&lt;/tt&gt; e a maior, por sua vez, através da tag &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;col-lg-&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Sistema de Grid do Bootstrap</title><link href="http://www.excript.com/wordpress/sistema-grid-bootstrap.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/sistema-grid-bootstrap.html</id><summary type="html">&lt;div class="section" id="sistema-de-grid-ou-sistema-12-colunas"&gt;
&lt;h2&gt;SISTEMA DE GRID OU SISTEMA 12 COLUNAS&lt;/h2&gt;
&lt;p&gt;O sistema de Grid, também chamado de sistema 12 colunas, é um sistema onde cada linha horizontal possui 12 unidades de medida.&lt;/p&gt;
&lt;p&gt;É importante observar que o sistema de Grid é uma definição para a largura do documento, até porque, a altura pode assumir qualquer tamanho.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sistema-12-colunas"&gt;
&lt;h2&gt;SISTEMA 12 COLUNAS&lt;/h2&gt;
&lt;p&gt;O sistema 12 colunas funciona através da definição de classes CSS. Assim, tem-se um mesmo nome de classe CSS com numeração no intervalo de 1 até 12. Como já dito, a valor numérico significa uma unidade de coluna e é impossível saber ao certo qual será o tamanho que cada coluna irá possuir.&lt;/p&gt;
&lt;p&gt;Essa nomenclatura de 12 classes ocorre para cada resolução de tela. Assim, o nome da classe CSS é constituido da seguinte maneira:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.col-&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tamanho&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;unidades_de_colunas&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Como podemos ver, temos 12 classes CSS para cada tamanho e resolução de vídeo e isso acontece, porque o sistema de grid divide a tela que será exibida em 12 unidades distintas, ou seja, em cada segmento horizontal é possível exibir elementos que venham a ocupar até 12 unidades de tela.&lt;/p&gt;
&lt;p&gt;Nas situações em que esse valor for ultrapassado, o framework irá exibir os componentes, ou partes destes, que excedam a quantia de 12 unidades no segmento horizontal abaixo. Nas situações em que as 12 unidades não sejam preenchidas, nada irá acontecer, salvo a não exibição de qualquer conteúdo no(s) semento(s).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="os-4-tamanhos-reconhecidos"&gt;
&lt;h2&gt;OS 4 TAMANHOS RECONHECIDOS&lt;/h2&gt;
&lt;p&gt;O bootstrap reconhece 4 tamanhos de telas, são eles:
- Extra small devices Phones (&amp;lt;768px)
- Small devices Tablets (≥768px)
- Medium devices Desktops (≥992px)
- Large devices Desktops (≥1200px)&lt;/p&gt;
&lt;p&gt;Cada tamanho possui uma abreviatura, então nós temos que:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;xs - Extra small&lt;/li&gt;
&lt;li&gt;sm - Small&lt;/li&gt;
&lt;li&gt;md - Medium&lt;/li&gt;
&lt;li&gt;lg - Large&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A partir dessas abreviações é constituido o nome das classes. Então, por exemplo:&lt;/p&gt;
&lt;p&gt;col-xs-1 até col-xs-12
col-sm-1 até col-sm-12
col-md-1 até col-md-12
col-lg-1 até col-lg-12&lt;/p&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Templates e Seus Fragmentos do Wordpress</title><link href="http://www.excript.com/wordpress/templates-seus-fragmentos-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/templates-seus-fragmentos-wordpress.html</id><summary type="html">&lt;div class="section" id="partes-de-um-template"&gt;
&lt;h2&gt;PARTES DE UM TEMPLATE&lt;/h2&gt;
&lt;p&gt;O Wordpress mantém partes de um template em arquivos separados e também, para cada uma dessas partes destacáveis, existe uma função especial para a obtenção de maneira simples e rápida do código desse segmento.&lt;/p&gt;
&lt;p&gt;Podemos dizer que o Wordpress faz 4 grandes divisões, no caso, nós temos o cabeçalho e o rodapé, a sidebar e o conteúdo propriamente dito. Porém, pode haver mais do que 4 partes, por exemplo, se foi definido que as postagens terão comentários e também, irão exibir a lista com todos os comentários de uma seção, nós iremos ter um, dois ou mais segmentos que deverão ser importados quando&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="as-4-partes-principais"&gt;
&lt;h2&gt;AS 4 PARTES PRINCIPAIS&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="header"&gt;
&lt;h2&gt;HEADER&lt;/h2&gt;
&lt;p&gt;O cabeçalho do nosso tema, ou então, o header, normalmente é definido no arquivo &lt;tt class="docutils literal"&gt;header.php&lt;/tt&gt; e para invocarmos o mesmo, temos a função, &lt;tt class="docutils literal"&gt;get_header()&lt;/tt&gt;. É importante observar que podemos dar outro nome para o local que irá armazenar o código referente ao cabeçalho, porém, se assim for, teremos que informar o nome desse arquivo como parâmetro da função &lt;tt class="docutils literal"&gt;get_header()&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Arquivos estáticos, de CSS e JavaScript não devem ser adicionados ao código, até porque, o Wordpress define uma função de aberturas dos arquivos estáticos do nosso site. Essa é uma maneira de evitarmos a abertura duplicada de versões diferentes de uma mesma biblioteca.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="footer"&gt;
&lt;h2&gt;FOOTER&lt;/h2&gt;
&lt;p&gt;Semelhante ao que temos com o cabeçalho, temos com o rodapé. O arquivo que irá conter os código de exibição do rodapé é o arquivo &lt;tt class="docutils literal"&gt;footer.php&lt;/tt&gt; e a função para abertura do mesmo, é &lt;tt class="docutils literal"&gt;get_footer()&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Dessa forma, temos tanto a definição do arquivo que deve conter os códigos como também, da função que irá abrir estes códigos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sidebar"&gt;
&lt;h2&gt;SIDEBAR&lt;/h2&gt;
&lt;p&gt;O Sidebar, ainda que contenha um arquivo de código, precisara ser registrado, através do arquivos functions.php para que o mesmo funcione. Isso decorre do fato de que precisamos &amp;quot;ligar&amp;quot; as áreas do Sidebar com a interface da parte administrativa do Wordpress.&lt;/p&gt;
&lt;p&gt;Assim, diferentemente do que temos com o Header e com o Footer, o Sidebar precisará não somente ser programado num arquivo a parte como também, será necessário estabelecer a relação na parte administrativa do Wordpress.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conteudo"&gt;
&lt;h2&gt;CONTEÚDO&lt;/h2&gt;
&lt;p&gt;Diferentemente do que temos com as demais partes, o conteúdo propriamente dito é geralmente o responsável por invocar as demais partes. Por exemplo, na renderização de uma página, teremos que abrir o cabeçalho, adicionarmos o conteúdo propriamente dito, em seguida, abrir o Sidebar (caso exista) e por fim, precisamos abrir o Footer.&lt;/p&gt;
&lt;p&gt;Por essa razão, devemos pensar no conteúdo como sendo o centro e as demais partes, como sendo as partes periféricas da página ou da postagem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="secoes-dos-template"&gt;
&lt;h2&gt;SEÇÕES DOS TEMPLATE&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="template"&gt;
&lt;h2&gt;TEMPLATE&lt;/h2&gt;
&lt;p&gt;Template é o conjunto de arquivos, funções, propriedades e atributos utilizados para definir como o conteúdo será exibido para o usuário. Essa é a definição global de template, porém, existem outras nomenclaturas importantes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="page-template"&gt;
&lt;h2&gt;PAGE TEMPLATE&lt;/h2&gt;
&lt;p&gt;Page template diz respeito aos arquivos de programação, geralmente arquivos PHP que contém o código necessário para a exibição de páginas. É importante observar a diferença prática e conceitual de Página e Postagem para o Wordpress.
Uma página é aquela que é criada na seção Páginas do Wordpress, podem estar dispostas  hierárquicamente, possuem o atributo TEMPLATE e não podem ser associadas a uma categoria.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="template-tags"&gt;
&lt;h2&gt;TEMPLATE TAGS&lt;/h2&gt;
&lt;p&gt;Template TAGS são funções PHP (built-in) disponibilizadas pelo Wordpress para a construção de temas, plug-ins e/ou qualquer extensão do Wordpress. O conceito de API e de template TAGS é, basicamente o mesmo. Porém, API faz referência a toda &lt;tt class="docutils literal"&gt;interface&lt;/tt&gt;  de programação do Wordpress, enquanto &lt;tt class="docutils literal"&gt;Template TAG&lt;/tt&gt; é somente uma definição da API para a realização de uma tarefa.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="template-files"&gt;
&lt;h2&gt;TEMPLATE FILES&lt;/h2&gt;
&lt;p&gt;O &lt;tt class="docutils literal"&gt;Template file&lt;/tt&gt; é todo e qualquer arquivo de programação contido dentro da pasta do nosso tema. Inclui-se arquivos PHP, HTML, CSS, PNG, JPGE e qualquer outro que venha fazer parte do nosso tema.&lt;/p&gt;
&lt;p&gt;Os arquivos de template mais utilizados são os arquivos de código PHP e CSS.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>The Loop do Wordpress</title><link href="http://www.excript.com/wordpress/the-loop-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/the-loop-wordpress.html</id><summary type="html">&lt;div class="section" id="the-loop"&gt;
&lt;h2&gt;THE LOOP&lt;/h2&gt;
&lt;p&gt;O &lt;tt class="docutils literal"&gt;The Loop&lt;/tt&gt;, é o laço de repetição que imprime a lista de postagens, uma postagem especifica ou então, uma determinada página.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;A parte principal do desenvolvimento de temas para o Wordpress é o entendimento do que é comumente chamado de &lt;tt class="docutils literal"&gt;the loop&lt;/tt&gt;, ou seja, o laço de repetição onde de fato, tudo irá acontecer.&lt;/p&gt;
&lt;p&gt;Toda a teoria acerca do que é chamado &lt;tt class="docutils literal"&gt;the loop&lt;/tt&gt; se resume no entendimento da utiliszação da instrução &lt;tt class="docutils literal"&gt;while&lt;/tt&gt;, ou seja, o entendimento de como funciona a iteração.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pratica"&gt;
&lt;h2&gt;PRÁTICA&lt;/h2&gt;
&lt;p&gt;O conceito sobre o que é chamado de &lt;tt class="docutils literal"&gt;the loop&lt;/tt&gt;, como já dito, se resume a uma iteração qualquer, porém, na construção de temas para o Wordpress, as principais tarefas ocorrem nessa laço de repetição.&lt;/p&gt;
&lt;p&gt;Por exemplo, será com esse laço que iremos imprimir a lista de postagens, como também, será com este laço que montaremos a página de exibição de uma única postagem, e até a exibição de páginas estáticas ocorre através deste conceito.&lt;/p&gt;
&lt;p&gt;Assim, o principio é simples, porém, representa a parte principal na renderização de temas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="codigo-legado"&gt;
&lt;h2&gt;CÓDIGO LEGADO&lt;/h2&gt;
&lt;p&gt;Como sabemos, o Wordpress foi originalmente escrito para ser um gerenciador de blogs, ou seja, o mesmo foi construído com o objetivo principal de ser uma ferramenta simples e prática para escrevermos e publicarmos postagens.&lt;/p&gt;
&lt;p&gt;Internamente, podemos ver, através do nomes de variáveis, que o conceito fundamental se mantém, isto é, a variável &lt;tt class="docutils literal"&gt;$post&lt;/tt&gt; por exemplo, pode conter as informações de uma postagem como também, de um página. Assim, indiferente da tarefa que estivermos executando, ou seja, tanto na exibição de postagens como também, na exibição de páginas, em ambas as situações, iremos trabalhar com funções e variáveis que fazem menção a postagem.&lt;/p&gt;
&lt;p&gt;Ou seja, as variáveis internamente, possuem uma nomenclatura como se tudo fosse postagens, logo, se realmente desejarmos saber qual a parte do tema que esta sendo renderizada, temos que invocar uma função para que seja retornado se estamos a renderizar uma página, uma postagem ou mesmo, uma lista de postagens.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Wordpress</title><link href="http://www.excript.com/wordpress/wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/wordpress.html</id><summary type="html">&lt;div class="section" id="assets"&gt;
&lt;h2&gt;ASSETS&lt;/h2&gt;
&lt;p&gt;No desenvolvimento WEB, &lt;tt class="docutils literal"&gt;Assets&lt;/tt&gt; representam todos os arquivos que compõem o nosso tema. Por exemplo, comumente um site possui arquivos de CSS, JavaScripts, imagens, fontes especiais e outros arquivo referentes a tecnologia empregada. A esses arquivos, damos o nome da &lt;tt class="docutils literal"&gt;Assets&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="assets-no-wordpress"&gt;
&lt;h2&gt;ASSETS NO WORDPRESS&lt;/h2&gt;
&lt;p&gt;O Wordpress centraliza e administra os &lt;tt class="docutils literal"&gt;assests&lt;/tt&gt; de cada tema, e assim, os mesmos são adicionados ao código através das funções &lt;tt class="docutils literal"&gt;wp_enqueue_style&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;wp_enqueue_script&lt;/tt&gt; que estão definidas no arquivo &lt;tt class="docutils literal"&gt;functions.php&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Outros &lt;tt class="docutils literal"&gt;assets&lt;/tt&gt; serão baixados a cada vez que o site for visualizados. Estes arquivos, são armazenados num serviço de nome CDN.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cdn"&gt;
&lt;h2&gt;CDN .&lt;/h2&gt;
&lt;p&gt;O acrônimo CDN é oriundo de &lt;tt class="docutils literal"&gt;Content Delivery Network&lt;/tt&gt; que, numa tradução livre, significa &lt;tt class="docutils literal"&gt;Rede de Distribuição de Conteúdo&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Uma Rede de Distribuição de Conteúdo são servidores comerciais que armazenam arquivos estáticos de bibliotecas e/ou frameworks que são utilizados por um grande número de aplicações.&lt;/p&gt;
&lt;p&gt;Cada CDN possui computadores nos principais núcleos da internet a fim de estar o mais próximo possível do usuário. Ao invés de manter os dados centralizados, sobrecarregando um único servidor e trafegando sempre as mesmas informações, esse modelo de serviço responde ao usuário do nó (computador) mais próximo.&lt;/p&gt;
&lt;p&gt;Por fim, uma CDN deve ser entendida como servidores que mantem cópias de informações em diversas regiões do planeta para entregar rapidamente as requisições e também, evitar que uma mesma informação seja trafegada pela rede inúmeras vezes de um extremo ao outro da grande rede.&lt;/p&gt;
&lt;p&gt;A utilização de CDN diminui a latência, melhora o paralelismo e o armazenamento em cache.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Algumas CDN famosas são:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;bootstrap CDN - &lt;a class="reference external" href="http://www.bootstrapcdn.com/"&gt;http://www.bootstrapcdn.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google Hosted Libraries (Google API) - &lt;a class="reference external" href="https://developers.google.com/speed/libraries/"&gt;https://developers.google.com/speed/libraries/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;!-- d http://encosia.com/3-reasons-why-you-should-let-google-host-jquery-for-you/ --&gt;
&lt;/div&gt;
&lt;div class="section" id="utilizando-a-api-do-wordpress"&gt;
&lt;h2&gt;UTILIZANDO A API DO WORDPRESS&lt;/h2&gt;
&lt;p&gt;O desenvolvimento para Wordpress ocorre de maneira procedural, ou seja, o Wordpress disponibiliza uma série de funções e o nosso trabalho é invocar as funções que precisamos para extrair informações.&lt;/p&gt;
&lt;p&gt;O conceito elementar na construção de um tema, é entender, no mínimo, o básico da hierarquia de templates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="caso-de-estudo"&gt;
&lt;h2&gt;CASO DE ESTUDO&lt;/h2&gt;
&lt;p&gt;Vamos supor uma situação qualquer, onde o Wordpress recebeu uma solicitação. Este, irá definir a precedência de template baseando-se na URL recebida. Então, vamos supor agora que o Wordpress recebeu uma requisição para que seja exibido a página inicial do site.&lt;/p&gt;
&lt;p&gt;Inicialmente, a tomada de decisão para que seja renderizado a página inicial, se dá quando nenhuma &lt;tt class="docutils literal"&gt;query&lt;/tt&gt; é enviado para o Wordpress.&lt;/p&gt;
&lt;p&gt;Nessa situação, o Wordpress irá checar qual o tema que está ativo e então, tentará invocar o template &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;front-page.php&lt;/span&gt;&lt;/tt&gt; contido dentro da raiz do tema que está ativo. Caso o arquivo não exista, o Wordpress irá procurar pelo template &lt;tt class="docutils literal"&gt;home.php&lt;/tt&gt;. Se o mesmo existir, a página é montada e o resultado enviado como respostado. Do contrário, ou seja, caso esse template também não exista, será invocado o template &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Como estudado, o template &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt; é necessário para que um determinado tema funcione, do contrário, será levantado uma exceção e uma mensagem de erro será retornada para o cliente.&lt;/p&gt;
&lt;p&gt;Este é a grosso modo como o Wordpress processa as solicitações. É importante observar que inicial, o Wordpress não exige que exista um único código no template &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt;, a exigência é que este arquivo exista na raiz de cada tema.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="invocando-funcoes-da-api"&gt;
&lt;h2&gt;INVOCANDO FUNÇÕES DA API&lt;/h2&gt;
&lt;p&gt;Abra o seu arquivo &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt; e cole o código a seguir:&lt;/p&gt;
&lt;blockquote&gt;
&amp;lt;?php bloginfo('name'); ?&amp;gt;&lt;/blockquote&gt;
&lt;p&gt;Em seguida, certifique-se que o template ativo nas configurações do Wordpress seja o mesmo do local onde você editou o arquivo &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt;. Em seguida, digite a URL da instalação do seu Wordpress e será impresso na tela, o nome do site que foi definido no Admin do Wordpress.&lt;/p&gt;
&lt;p&gt;A função &lt;tt class="docutils literal"&gt;bloginfo()&lt;/tt&gt; está definida no arquivo &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;general-template.php&lt;/span&gt;&lt;/tt&gt; e a mesma invoca a função &lt;tt class="docutils literal"&gt;get_bloginfo()&lt;/tt&gt; onde está definido o que deve ser retornado para cada parâmetro que seja enviado. Assim, o objetivo da função é  retornar informações do nosso site. A função &lt;tt class="docutils literal"&gt;bloginfo()&lt;/tt&gt; tem definido um parâmetro tipo &lt;tt class="docutils literal"&gt;string&lt;/tt&gt;, no caso, há definido várias constantes e cada uma faz com que a função retorne um tipo de informação diferente. A seguir, temos a lista de parâmetros possíveis e o respectivo valor que será retornado:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;quando a função bloginfo() é invocada e nenhum parâmetro é enviado, assume-se que o parâmetro é 'name', ou seja, é retornado o nome do site que foi definido na área administrativa.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;url: &lt;a class="reference external" href="http://localhost/wordpress"&gt;http://localhost/wordpress&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;Retorna a url da &lt;tt class="docutils literal"&gt;home&lt;/tt&gt; do site. A mesma informação pode ser obtida com a função &lt;tt class="docutils literal"&gt;home_url()&lt;/tt&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;wpurl: &lt;a class="reference external" href="http://localhost/wordpress"&gt;http://localhost/wordpress&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;retorna a url especificamente do nosso site. A mesma informação pode ser obtida através da função &lt;tt class="docutils literal"&gt;site_url()&lt;/tt&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;description:&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;Só mais um site WordPress&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;rdf_url: &lt;a class="reference external" href="http://localhost/wordpress/feed/rdf/"&gt;http://localhost/wordpress/feed/rdf/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;rss_url: &lt;a class="reference external" href="http://localhost/wordpress/feed/rss/"&gt;http://localhost/wordpress/feed/rss/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;rss2_url': &lt;a class="reference external" href="http://localhost/wordpress/feed/"&gt;http://localhost/wordpress/feed/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;atom_url: &lt;a class="reference external" href="http://localhost/wordpress/feed/atom/"&gt;http://localhost/wordpress/feed/atom/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;comments_atom_url: &lt;a class="reference external" href="http://localhost/wordpress/comments/feed/atom/"&gt;http://localhost/wordpress/comments/feed/atom/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;comments_rss2_url: &lt;a class="reference external" href="http://localhost/wordpress/comments/feed/"&gt;http://localhost/wordpress/comments/feed/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;pingback_url: &lt;a class="reference external" href="http://localhost/wordpress/xmlrpc.php"&gt;http://localhost/wordpress/xmlrpc.php&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;stylesheet_url: &lt;a class="reference external" href="http://localhost/wordpress/wp-content/themes/amk-primer-tema-wordpress/style.css"&gt;http://localhost/wordpress/wp-content/themes/amk-primer-tema-wordpress/style.css&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;stylesheet_directory: &lt;a class="reference external" href="http://localhost/wordpress/wp-content/themes/amk-primer-tema-wordpress"&gt;http://localhost/wordpress/wp-content/themes/amk-primer-tema-wordpress&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;'template_directory' template_directory: &lt;a class="reference external" href="http://localhost/wordpress/wp-content/themes/amk-primer-tema-wordpress"&gt;http://localhost/wordpress/wp-content/themes/amk-primer-tema-wordpress&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;'template_url': &lt;a class="reference external" href="http://localhost/wordpress/wp-content/themes/amk-primer-tema-wordpress"&gt;http://localhost/wordpress/wp-content/themes/amk-primer-tema-wordpress&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;admin_email: &lt;a class="reference external" href="mailto:excript&amp;#64;excript.com"&gt;excript&amp;#64;excript.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;charset: UTF-8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;html_type: text/html&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;version: 4.2.4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;language: pt-BR&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Agora, para digite o código a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nx"&gt;bloginfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nx"&gt;bloginfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nx"&gt;bloginfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Muito provavelmente, será exibido uma página com um código semelhante ao que temos abaixo:&lt;/p&gt;
&lt;blockquote&gt;
Tema Wordpress
Tema Wordpress
Só mais um site WordPress&lt;/blockquote&gt;
&lt;p&gt;O mais importante a entendermos nesse momento, é que as informações que precisarmos no desenvolvimento de um tema, serão obtidas através de alguma função contida na API. Tudo, sem exceção, que é definido na área Admin do Wordpress pode ser acessado de alguma maneira no desenvolvimento do tema, e assim, a única coisa que precisamos, é conhecer as principais funções para montarmos, dinamicamente, o tema quando o Wordpress solicitar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="variaveis-de-ambiente-do-wordpress"&gt;
&lt;h2&gt;VARIÁVEIS DE AMBIENTE DO WORDPRESS&lt;/h2&gt;
&lt;p&gt;Se colocarmos um breakpoint em qualquer ponto de entrada do nosso tema, conseguiremos obter a lista de variáveis definidas pelo Wordpress. Se por exemplo, verificarmos as variáveis de ambiente no template &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt;, será possível saber qual usuário está logado. Para obter essa informação, basta inspecionar a variável &lt;tt class="docutils literal"&gt;$current_user&lt;/tt&gt;.
Outra variável interessante, dizem respeito ao navegador do cliente que enviou a solicitação, para isso, temos várias variáveis, por exemplo:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;$is_IE&lt;/li&gt;
&lt;li&gt;$is_chrome&lt;/li&gt;
&lt;li&gt;$is_gecko&lt;/li&gt;
&lt;li&gt;$is_iphone&lt;/li&gt;
&lt;li&gt;$is_lynx&lt;/li&gt;
&lt;li&gt;$is_macIE&lt;/li&gt;
&lt;li&gt;$is_opera&lt;/li&gt;
&lt;li&gt;$is_safari&lt;/li&gt;
&lt;li&gt;$is_winIE&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Também podemos inspecionar as &lt;tt class="docutils literal"&gt;query&lt;/tt&gt; SQL que foi enviada para o banco, através da variável &lt;tt class="docutils literal"&gt;$wp_query&lt;/tt&gt;. E conseguirmos saber não somente o SQL que foi envia e a respectiva resposta, há muito mais informações que podemos explorar para entendermos melhor o Wordpress ou mesmo, para fazermos alguma interrupção ou injetarmos algum código.&lt;/p&gt;
&lt;p&gt;Provavelmente, a variável mais importante e que podemos extrair muitas informações é a &lt;tt class="docutils literal"&gt;$post&lt;/tt&gt;. Nos templates &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;home.php&lt;/tt&gt;, o wordpress disponibiliza funções para iterarmos as postagens, assim, temos que a variável &lt;tt class="docutils literal"&gt;$post&lt;/tt&gt; sempre irá conter uma postagem e após invocarmos a função &lt;tt class="docutils literal"&gt;the_post()&lt;/tt&gt;, avançaremos para o próxima postagem e assim, se inspecionarmos a variável &lt;tt class="docutils literal"&gt;$post&lt;/tt&gt; novamente, veremos que há outra postagem selecionada.&lt;/p&gt;
&lt;p&gt;Enquanto a variável &lt;tt class="docutils literal"&gt;$post&lt;/tt&gt;, no singular, contém um único postagem, também há disponível a variável &lt;tt class="docutils literal"&gt;$posts&lt;/tt&gt;, onde encontramos um Array com todas as postagens que foram retornadas.&lt;/p&gt;
&lt;p&gt;Por fim, caso desejamos saber qual&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="arquivo-functions-php"&gt;
&lt;h2&gt;ARQUIVO &lt;tt class="docutils literal"&gt;functions.php&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Um tema, pode fazer uso de um arquivo de nome &lt;tt class="docutils literal"&gt;functions.php&lt;/tt&gt; que é aberto automaticamente pelo WordPress. Este arquivo, deve estar contido na raiz do nosso tema e o seu nome deve ser exatamente &lt;tt class="docutils literal"&gt;functions.php&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Em suma, devemos pensar no arquivo &lt;tt class="docutils literal"&gt;functions.php&lt;/tt&gt; como se fosse um plug-in, onde podemos adicionar funções globais e enfileirar outras funções para que estas sejam abertas conforme a mesma foi adicionada na fila para a sua abertura.&lt;/p&gt;
&lt;p&gt;É normal que o arquivo &lt;tt class="docutils literal"&gt;functions.php&lt;/tt&gt; enfileirar a abertura dos arquivos CSS, JavaScript, Fontes e etc. Para esses arquivos estáticos, podemos fazer uso das funções  &lt;tt class="docutils literal"&gt;wp_enqueue_scripts()&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;wp_enqueue_style()&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Também é comum registrarmos as Sidebars, os Menus de Navegação, Formatos de postagens, Cabeçalhos de páginas personalizados, Backgrounds personalizados e muitas outras funções que viermos a necessitar no desenvolvimento.&lt;/p&gt;
&lt;p&gt;Também é comum a adição de funções globais, assim, toda função adicionada no arquivo &lt;tt class="docutils literal"&gt;functions.php&lt;/tt&gt; poderá facilmente ser acessada de qualquer arquivo &lt;tt class="docutils literal"&gt;PHP&lt;/tt&gt; pertencente ao nosso tema.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sidebar"&gt;
&lt;h2&gt;SIDEBAR&lt;/h2&gt;
&lt;p&gt;Sidebar são as zonas do tema em que é possível adicionar widgets através da parte administrativa do Wordpress. O Wordpress define vários widgets por padrão, porém, é possível, através de plug-ins, personalizar widgets ou então, criar um novo a partir do zero.&lt;/p&gt;
&lt;p&gt;É interessante que você acessa a área de Widgets na Dashboard antes de implementarmos os códigos da Sidebar e observe como a mesma está desabilitada. Isto é, o Wordpress mantém os Widgets desabilitados por padrão, logo, esta área só será ativada a partir do momento em que registrarmos uma zona de Sidebar em nosso tema.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sidebar-e-widgets"&gt;
&lt;h2&gt;SIDEBAR E WIDGETS&lt;/h2&gt;
&lt;p&gt;Sidebar e widgets são conceitos distintos, porém, um é complemento do outro. No desenvolvimento de um tema temos que escolher as regiões em que será possível a adição de widgets.&lt;/p&gt;
&lt;p&gt;Por padrão, a sidebar deve ser definida no arquivo &lt;tt class="docutils literal"&gt;sidebar.php&lt;/tt&gt;. Assim, temos que pensar neste arquivo PHP da mesma forma como estudamos os arquivos &lt;tt class="docutils literal"&gt;header.php&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;footer.php&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Se partimos da premissa que a nossa Sidebar estará localizada no canto direito do vídeo, e que no centro, estamos utilizando um sistema de grid que ocupam 8 unidades, poderíamos definir a programação da Sidebar da seguinte maneira:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;&amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nx"&gt;get_sidebar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Estamos definindo que a região da barra-lateral utilizará 4 unidades quando estivermos renderizando o nosso site numa resolução de vídeo de tamanho &lt;tt class="docutils literal"&gt;md&lt;/tt&gt; ou superior.&lt;/p&gt;
&lt;p&gt;Em seguida, invocamos a função &lt;tt class="docutils literal"&gt;get_sidebar()&lt;/tt&gt; que desempenhará a mesma função que as funções &lt;tt class="docutils literal"&gt;get_header()&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;get_footer()&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="registrando-zonas-dinamicas-em-functions-php"&gt;
&lt;h2&gt;REGISTRANDO ZONAS DINÂMICAS EM &lt;tt class="docutils literal"&gt;functions.php&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;A seguir, temos o &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt; que podemos passar como parâmetro pela função &lt;tt class="docutils literal"&gt;register_sidebar()&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;array(&lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;name&amp;#39;          =&amp;gt; ... , //Nome da área dinâmica&lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;id&amp;#39;            =&amp;gt; ..., //ID da zona da sidebar&lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;description&amp;#39;   =&amp;gt; ..., //Descrição da sidebar&lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;before_widget&amp;#39; =&amp;gt; ..., //HTML que precederá o Widget&lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;after_widget&amp;#39;  =&amp;gt; ..., //HTML que sucede o Widget&lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;before_title&amp;#39;  =&amp;gt; ..., //Tag a ser inserida antes do título&lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;after_title&amp;#39;   =&amp;gt; ... //Tag a ser inserida depois do título&lt;/span&gt;
&lt;span class="x"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="codigo-para-o-registro-da-sidebar"&gt;
&lt;h2&gt;CÓDIGO PARA O REGISTRO DA SIDEBAR&lt;/h2&gt;
&lt;p&gt;A seguir, temos o código a ser inserido no arquivo &lt;tt class="docutils literal"&gt;functions.php&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;php&lt;/span&gt;
&lt;span class="x"&gt;//função builtin que registra zonas dinâmicas (sidebar)&lt;/span&gt;
&lt;span class="x"&gt;register_sidebar(array(&lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;name&amp;#39; =&amp;gt; __(&amp;#39;Lateral direita&amp;#39;, &amp;#39;toinnn&amp;#39;), //Nome da área dinâmica&lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;id&amp;#39; =&amp;gt; &amp;#39;lateral-direita&amp;#39;, //ID da zona da sidebar&lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;description&amp;#39; =&amp;gt; __( &amp;#39;Zona dinâmica do tema (sidebar)&amp;#39;, &amp;#39;toinnn&amp;#39;), //Descrição da sidebar&lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;before_widget&amp;#39; =&amp;gt; &amp;#39;&amp;lt;div id=&amp;quot;%1$s&amp;quot; class=&amp;quot;widget %2$s&amp;quot;&amp;gt;&amp;#39;, //HTML que precederá o Widget&lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;after_widget&amp;#39;  =&amp;gt; &amp;#39;&amp;lt;/div&amp;gt;&amp;#39;, //HTML que sucede o Widget&lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;before_title&amp;#39; =&amp;gt; &amp;#39;&amp;lt;h3&amp;gt;&amp;#39;, //Tag a ser inserida antes do título&lt;/span&gt;
&lt;span class="x"&gt;    &amp;#39;after_title&amp;#39; =&amp;gt; &amp;#39;&amp;lt;/h3&amp;gt;&amp;#39; //Tag a ser inserida depois do título&lt;/span&gt;
&lt;span class="x"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="acessando-o-dashboard-area-administrativa"&gt;
&lt;h2&gt;ACESSANDO O DASHBOARD (área administrativa)&lt;/h2&gt;
&lt;p&gt;Se o registro da sidebar no arquivo &lt;tt class="docutils literal"&gt;functions.php&lt;/tt&gt; foi realizado corretamente, a área para adicionarmos Widgets será ativada automaticamente. Então, para que você tenha a certeza de que a sua Sidebar está funcionando corretamente, acesse a área administrativa e veja se a área de widgets está ativa.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="arquivo-sidebar-php"&gt;
&lt;h2&gt;ARQUIVO &lt;tt class="docutils literal"&gt;sidebar.php&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Normalmente o código contido no arquivo &lt;tt class="docutils literal"&gt;sidebar.php&lt;/tt&gt; é bastante simples.&lt;/p&gt;
&lt;p&gt;Inicialmente, temos que verificar se a área que definimos como sendo da Sidebar está ativa. Para isso, o Wordpress disponibiliza a função &lt;tt class="docutils literal"&gt;is_active_sidebar()&lt;/tt&gt;. Como função, basta passarmos o ID que definimos como sendo da Sidebar.&lt;/p&gt;
&lt;p&gt;Caso a área esteja ativa, então, basta invocarmos a função &lt;tt class="docutils literal"&gt;dynamic_sidebar()&lt;/tt&gt;, passando novamente a ID que foi definida como sendo da Sidebar e que verificamos que a mesma está ativa como parâmetro. Feito isso, o núcleo do Wordpress tratará de renderizar, da melhor maneira, os Widgets que o usuário do nosso tema adicionou.&lt;/p&gt;
&lt;p&gt;A seguir, temos o código completo que devemos colocar no arquivo &lt;tt class="docutils literal"&gt;sidebar.php&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;is_active_sidebar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lateral-direita&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Verifica se a área &amp;quot;lateral-direita&amp;quot; esta ativada&lt;/span&gt;
        &lt;span class="nx"&gt;dynamic_sidebar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lateral-direita&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Em caso afirmativo, invocamos a função que abre os Widgets&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Wordpress Internamente</title><link href="http://www.excript.com/wordpress/wordpress-internamente.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/wordpress-internamente.html</id><summary type="html">&lt;div class="section" id="funcionamento-interno-e-ponto-de-entrada"&gt;
&lt;h2&gt;FUNCIONAMENTO INTERNO E PONTO DE ENTRADA&lt;/h2&gt;
&lt;p&gt;Toda requisição enviada para uma instalação do Wordpress irá percorrer, inicialmente, o mesmo caminho. Outras requisições, muito provavelmente, serão bloqueadas pelo servidor a fim de proteger a estrutura de diretório da nossa instalação.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ponto-de-entrada-geral-do-wordpress"&gt;
&lt;h2&gt;1 - PONTO DE ENTRADA GERAL DO WORDPRESS&lt;/h2&gt;
&lt;p&gt;Na maior parte dos servidores que estão rodando instâncias do Wordpress, o primeiro arquivo  de programação a ser interpretado, será o .htaccess.&lt;/p&gt;
&lt;p&gt;O arquivos .htaccess contém instruções e diretrizes para o Servidor Web Apache, ou seja, dentro do .htaccess é onde estão contidas as principais regras de como o Servidor deve se comportar mediante diversas requisições.
Então, ao encontrar um arquivo .htaccess o Servidor Apache irá enviar para o mesmo a URL oriúnda de um cliente da Web.
Após o script receber a URL o mesmo pode fazer com que o Apache aja de uma determinada maneira, para as mais diversas situações que podem vir a ocorrer.&lt;/p&gt;
&lt;p&gt;Por exemplo, podemos definir no arquivo .htaccess que um diretório foi alterado, ou então, que um diretório não pode ser servido (enviado para o cliente). Pode verificar se a URL em questão está requisitando um arquivo de mídia e direcionar a requisição para o diretório onde estão nossas imagens, vídeo, arquvos CSS e etc.
Inclusive, podemos permitir que um diretório esteja disponível para um determiando IP, e para uma determianda faixa de IP, o diretório em questão naõ deve estar disponível.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;# BEGIN WordPress&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;IfModule mod_rewrite.c&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;RewriteEngine On&lt;/span&gt;
&lt;span class="x"&gt;RewriteBase /wordpress/&lt;/span&gt;
&lt;span class="x"&gt;RewriteRule ^index\.php$ - [L]&lt;/span&gt;
&lt;span class="x"&gt;RewriteCond %{REQUEST_FILENAME} !-f&lt;/span&gt;
&lt;span class="x"&gt;RewriteCond %{REQUEST_FILENAME} !-d&lt;/span&gt;
&lt;span class="x"&gt;RewriteRule . /wordpress/index.php [L]&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;# END WordPress&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Acima, temos o código que vem por padrão na versão 4.2 do Wordpress. Como é possível ver, está sendo definindo pontos de entrada, ou seja, arquivos de extensão .php que devem ser, por padrão, executados.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ponto-de-entrada-dos-temas"&gt;
&lt;h2&gt;PONTO DE ENTRADA DOS TEMAS&lt;/h2&gt;
&lt;p&gt;Um tema possui uma lógica que define qual será o ponto de entrada, ou seja, qual o arquivo que o Wordpress irá invocar para que a programação da montagem do tema seja executada.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-logica-de-entrada"&gt;
&lt;h2&gt;A LÓGICA DE ENTRADA&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Quando o Wordpress recebe uma solicitação de exibição de página, o arquivo &lt;cite&gt;index.php&lt;/cite&gt;, contido na raiz de cada instalação do Wordpress é inicializado. Em seguida, o mesmo invoca funções que irão verificar qual o tema definido pelo usuário na parte adminstrativa do Wordpress e então, irá verificar se a pasta do tema ativo contém um de 3 arquivos, são eles:&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic simple"&gt;
&lt;li&gt;front-page.php&lt;/li&gt;
&lt;li&gt;home.php&lt;/li&gt;
&lt;li&gt;index.php&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="arquivo-index-php"&gt;
&lt;h2&gt;2 - ARQUIVO &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;O objetivo do &lt;tt class="docutils literal"&gt;.htaccess&lt;/tt&gt; é direcionar todas as requisições GET para o &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt;. Se observarmos atentamente os outros arquivos *.php contidos na raiz da pasta do Wordpress, veremos que estes não compõem outras URL, ou seja, você provavelmente nunca viu um link com o nome de algum desses arquivos - salvo quando estavas instalando Wordpress.&lt;/p&gt;
&lt;p&gt;Abaixo, temos o código contido no arquivo &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt;. As descrições foram traduzidas de maneira não literal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt; * Frente da aplicação Wordpress. Este arquivo não faz nada, mas abre&lt;/span&gt;
&lt;span class="sd"&gt; * o arquivo ``wp-blog-header.php`` e este executado e diz para o     * Wordpress abrir o tema.&lt;/span&gt;
&lt;span class="sd"&gt; *&lt;/span&gt;
&lt;span class="sd"&gt; * @package WordPress&lt;/span&gt;
&lt;span class="sd"&gt; */&lt;/span&gt;

&lt;span class="sd"&gt;/**&lt;/span&gt;
&lt;span class="sd"&gt; * Diz para o WordPress abrir um tema e envia-lo.&lt;/span&gt;
&lt;span class="sd"&gt; * @var bool&lt;/span&gt;
&lt;span class="sd"&gt; f*/&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WP_USE_THEMES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="sd"&gt;/** Inicia o Ambiente Wordpress e seus Templates*/&lt;/span&gt;
&lt;span class="k"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;__FILE__&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/wp-blog-header.php&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Como visto, o arquivo de entrada, ou seja, o````index.php`` serve somente como um ponto de entrada e nada mais. O mesmo não faz qualquer roteamento e não toma nenhuma decisão.&lt;/p&gt;
&lt;p&gt;A primeira instrução do arquivo &lt;tt class="docutils literal"&gt;index.php&lt;/tt&gt; é definir o tema ativo e a função &lt;tt class="docutils literal"&gt;require()&lt;/tt&gt; abre e executa o arquivo &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-blog-header.php&lt;/span&gt;&lt;/tt&gt;. A partir desse momento, podemos dizer que o WordPress foi realmente iniciado. Então, vamos estudar o código que será executado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="o"&gt;/**&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Abre&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="nx"&gt;Ambiente&lt;/span&gt; &lt;span class="nx"&gt;Wordpress&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="nx"&gt;seus&lt;/span&gt; &lt;span class="nx"&gt;Templates&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;WordPress&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$wp_did_header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nv"&gt;$wp_did_header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;require_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;dirnameFILE__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/wp-load.php&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;wp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;require_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;ABSPATH&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;WPINC&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/template-loader.php&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inicicialmente, é verificado se a variável &lt;tt class="docutils literal"&gt;$wp_did_header&lt;/tt&gt; está setada. Caso esteja, isso significa que que alguns cabeçalhos já foram enviados e assim, evita que o WordPress seja iniciado mais de uma vez.&lt;/p&gt;
&lt;p&gt;No caso afirmativo, ou seja, caso a variável &lt;tt class="docutils literal"&gt;$wp_did_header&lt;/tt&gt; não esteja definida no ambiente, então a mesma é definida e inicializada com o valor &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Em seguida, o arquivo &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-load.php&lt;/span&gt;&lt;/tt&gt; é inicializado e quando executado o mesmo irá procurar pelo arquivo &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-config.php&lt;/span&gt;&lt;/tt&gt;. Neste é onde foram definidas as constantes para a conexão com o banco, para a autenticação de usuários, depuração e etc.&lt;/p&gt;
&lt;p&gt;Num primeiro momento, é verificado se o arquivo &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-config.php&lt;/span&gt;&lt;/tt&gt; existe na pasta de instalação do Wordpress, ou então, é verificado se o arquivo &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-config.php&lt;/span&gt;&lt;/tt&gt; existe no diretório acima da pasta onde está instalado porém, e também, é verificado se nesse nível acima NÃO existe o arquivo de nome &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-settings.php&lt;/span&gt;&lt;/tt&gt;. Abaixo temos os 2 diretórios buscados que extraí da depuração.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
htdocs/wp-config.php
htdocs/wordpress/wp-config.php
&lt;/pre&gt;
&lt;p&gt;Na segunda condição, ou seja, quando o arquivo &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-config.php&lt;/span&gt;&lt;/tt&gt; não está na pasta de instalação do Wordpress, mas o mesmo existe a um nível acima, é necessário verificar, se nesse nível acima não existe uma outra instalação do Wordpress. Senão, passaríamos a executar o arquivo de configuração de uma outra instação.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Trocando em miúdos, uma das 2 condições a seguir precisam ser verificadas para que o arquivo &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-config.php&lt;/span&gt;&lt;/tt&gt; seja aberto e executado:&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic simple"&gt;
&lt;li&gt;O arquivo existe na pasta de instalação&lt;/li&gt;
&lt;li&gt;O arquivo existe num diretório acima e neste NÃO existe o arquivo &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-config.php&lt;/span&gt;&lt;/tt&gt;, que sugeriria uma outra instalação do framework.&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Por fim, caso nenhuma condição seja satisfeita, é executado a instalação do Wordpress, até porque, o mesmo entende que precisa ser instalado para que esses arquivos sejam criados.&lt;/p&gt;
&lt;p&gt;Nas versões antigas do Wordpress, éramos obrigados a copiar esse arquivo no braço, até porque, havia alguma restrição que não permitia o Wordpress a escrever no diretório &lt;tt class="docutils literal"&gt;root&lt;/tt&gt; da aplicação.&lt;/p&gt;
&lt;p&gt;Em seguida, a função &lt;tt class="docutils literal"&gt;wp()&lt;/tt&gt; que está definida no arquivio &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wp-include\function.php&lt;/span&gt;&lt;/tt&gt; é executada e nenhum parâmetro é enviado. Essa função, tem o objetivo de registrar como variável de ambiente qualquer valor que seja enviado como parâmetro.&lt;/p&gt;
&lt;p&gt;Neste caso, executamos a função &lt;tt class="docutils literal"&gt;wp()&lt;/tt&gt; somente para que as variáveis de ambiente sejam inicializadas, nada mais. Então, a função &lt;tt class="docutils literal"&gt;wp()&lt;/tt&gt; não faz nada especial e não retorna valores, apenas define o valor enviado como parâmetro como sendo uma variável de ambiente.&lt;/p&gt;
&lt;p&gt;Por fim, o arquivo &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;template-loader.php&lt;/span&gt;&lt;/tt&gt; é aberto e executado e então, o WordPress abrirá o tema definido como padrão e irá invocar, uma a uma, as funções para a renderização do nosso tema.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lista-de-funcoes-que-retornam-url-absolutas"&gt;
&lt;h2&gt;LISTA DE FUNÇÕES QUE RETORNAM URL ABSOLUTAS&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;home_url(): Home URL &lt;a class="reference external" href="http://www.excript.com"&gt;http://www.excript.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;site_url(): Site directory URL &lt;a class="reference external" href="http://www.excript.com"&gt;http://www.excript.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;admin_url(): Admin dir &lt;a class="reference external" href="http://www.excript.com/wp-admin"&gt;http://www.excript.com/wp-admin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;includes_url(): Includes dir  &lt;a class="reference external" href="http://www.excript.com/wp-includes"&gt;http://www.excript.com/wp-includes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;content_url(): Content dir &lt;a class="reference external" href="http://www.excript.com/wp-content"&gt;http://www.excript.com/wp-content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;plugins_url(): Plugins dir &lt;a class="reference external" href="http://www.excript.com/wp-content/plugins"&gt;http://www.excript.com/wp-content/plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;theme_url(): Themes dir &lt;a class="reference external" href="http://www.excript.com/wp-content/themes"&gt;http://www.excript.com/wp-content/themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;wp_upload_dir(): Upload dir (retorna um array)        &lt;a class="reference external" href="http://www.excript.com/wp-content/uploads"&gt;http://www.excript.com/wp-content/uploads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FONTES
&lt;a class="reference external" href="http://theme.fm/2011/09/wordpress-internals-how-wordpress-boots-up-2315/"&gt;http://theme.fm/2011/09/wordpress-internals-how-wordpress-boots-up-2315/&lt;/a&gt;
&lt;a class="reference external" href="https://codex.wordpress.org/Function_Reference/admin_url"&gt;https://codex.wordpress.org/Function_Reference/admin_url&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry><entry><title>Xdebug e Wordpress</title><link href="http://www.excript.com/wordpress/xdebug-wordpress.html" rel="alternate"></link><updated>2016-01-01T00:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:www.excript.com,2016-01-01:wordpress/xdebug-wordpress.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;[XDebug]&lt;/span&gt;
&lt;span class="x"&gt;zend_extension = &amp;quot;C:\xampp\php\ext\php_xdebug.dll&amp;quot;&lt;/span&gt;

&lt;span class="x"&gt;xdebug.profiler_append = 0&lt;/span&gt;
&lt;span class="x"&gt;xdebug.profiler_enable = 1&lt;/span&gt;
&lt;span class="x"&gt;xdebug.profiler_enable_trigger = 0&lt;/span&gt;
&lt;span class="x"&gt;xdebug.profiler_output_dir = &amp;quot;C:\xampp\tmp&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;xdebug.profiler_output_name = &amp;quot;cachegrind.out.%t-%s&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;xdebug.trace_output_dir = &amp;quot;C:\xampp\tmp&amp;quot;&lt;/span&gt;

&lt;span class="x"&gt;xdebug.remote_enable = 1&lt;/span&gt;
&lt;span class="x"&gt;xdebug.remote_host = &amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;xdebug.remote_port=&amp;quot;9000&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;xdebug.remote_handler = &amp;quot;dbgp&amp;quot;&lt;/span&gt;

&lt;span class="x"&gt;xdebug.show_local_vars=1&lt;/span&gt;
&lt;span class="x"&gt;xdebug.var_display_max_data=10000&lt;/span&gt;
&lt;span class="x"&gt;xdebug.var_display_max_depth=20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="temas"></category><category term="wordpress"></category></entry></feed>