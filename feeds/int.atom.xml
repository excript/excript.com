<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>eXcript</title><link>http://excript.com/</link><description></description><lastBuildDate>Mon, 18 Jul 2016 16:20:00 -0300</lastBuildDate><item><title>Tipos de dados em Python</title><link>http://excript.com/python/tipos-de-dados-python.html</link><description>
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nessa aula estudaremos os tipos de dados definidos pela linguagem Python, como também, as diferenças entre diferentes tipos. Por fim, veremos a diferença entre um o tipo do dado e o dado propriamente dito.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="tipos"&gt;
&lt;h2&gt;TIPOS&lt;/h2&gt;
&lt;p&gt;O &lt;strong&gt;tipo&lt;/strong&gt; é uma forma de classificar as informação. As linguagens de programação normalmente trazem implementado o que é chamado de &lt;strong&gt;tipos primitivos&lt;/strong&gt;, isto é, o tipo de dado mais genérico possível.&lt;/p&gt;
&lt;p&gt;Toda informação que manipularemos será, por definição, de um tipo.&lt;/p&gt;
&lt;p&gt;Na informática tudo é manipulado como sendo bits. Quando manipulamos letras estamos trabalhando também com bits, porém, numa camada acima. Então, vamos definir agora, que num primeiro momento, toda informação é de fato um caractere, seja ele uma letra, um número, um simbolo ou então, um caractere especial.&lt;/p&gt;
&lt;p&gt;Assim, definimos num primeiro momento que tudo são caracteres.&lt;/p&gt;
&lt;div class="section" id="string"&gt;
&lt;h3&gt;String&lt;/h3&gt;
&lt;p&gt;Na programação String representa um conjunto de caracteres disposto numa determinada ordem. A partir de agora, todas as vezes em que falarmos o termo String, estaremos nos referindo a um conjunto de caracteres.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="numerico"&gt;
&lt;h3&gt;Numérico&lt;/h3&gt;
&lt;p&gt;Um segundo tipo de informação são os dados compostos por caracteres numéricos. Os números são dividos em 2 partes:&lt;/p&gt;
&lt;p&gt;inteiros - chamados de &lt;strong&gt;integer&lt;/strong&gt; ou &lt;strong&gt;int&lt;/strong&gt;
ponto flutuante - chamado de &lt;strong&gt;float&lt;/strong&gt; ou &lt;strong&gt;double&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplos-de-informacao"&gt;
&lt;h3&gt;Exemplos de informação&lt;/h3&gt;
&lt;p&gt;A título de exemplo, vamos citar alguns tipos de informação e em seguida, vamos definir o tipo de cada uma.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Nome - dado tipo String&lt;/li&gt;
&lt;li&gt;Idade - dado tipo Integer&lt;/li&gt;
&lt;li&gt;Conta bancária - dado composto por números, pontos e traços&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As informações são classificadas devido ao fato de seguirem regras e estruturas iguais. Ou seja, um número de telefone possui uma regra para todo o território nacional, logo, é possível classificar esse tipo de dado, até porque, há uma regra que o define.&lt;/p&gt;

    &lt;div class="admonitionblock tip data-line"&gt;
        &lt;table&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="icon"&gt;
                        &lt;i class="fa icon-tip" title="Dica!"&gt;&lt;/i&gt;
                    &lt;/td&gt;
                    &lt;td class="content"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt;Atualmente, os números de telefones no estado de São Paulo contém 9 digitos, enquanto os demais estados e capitais utilizam somente 8 digitos. Essa é uma situação que já ocorreu há anos e voltou a acontecer. Por isso, devemos estar certos de que irá acontecer novamente no futuro. Assim, é prudente que nossos softwares sejam capazes de lidar com essa variáção, seja para o momento atual, seja para estarem preparados para futuras modificações.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;p&gt;Um outros exemplo que possibilita a classificação é o número das contas bancárias que, geralmente, é composto por números e um digito verificador. O nome das pessoas, normalmente, é constituído somente por letras. A idade das pessoas é representado por números inteiros. Datas são a junção de números com alguns caracteres especiais e assim por diante.&lt;/p&gt;

    &lt;div class="admonitionblock tip data-line"&gt;
        &lt;table&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="icon"&gt;
                        &lt;i class="fa icon-tip" title="Dica!"&gt;&lt;/i&gt;
                    &lt;/td&gt;
                    &lt;td class="content"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt;Digito verificar é aquele número contido no final, geralmente após um traço ou então, após um ponto. A função deste digito é proporcinar um meio para chegar se os digitos anteriores estão corretos, até porque, o digito verificador é obtido através de uma fórmula matemática que utiliza todos os números e no final, gera um digito de confirmação. Por exemplo, o CPF é composto de 9 digitos, mais 2 digitos verificador, por exemplo: ``CPF: 123.456.789-09``.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;p&gt;A última parte do CPF acima, no caso, o número &lt;tt class="docutils literal"&gt;09&lt;/tt&gt; é o digito verificador e o mesmo foi obtido através de uma fórmula que utilizou todos os 9 digitos e resultou no digito verificador &lt;tt class="docutils literal"&gt;09&lt;/tt&gt;.
Exemplos de informações que possuem digito verificador são: o número da conta corrente de alguns bancos, o CPF dentre outras informações.&lt;/p&gt;
&lt;p&gt;Os tipos de dados são uma forma de classificação que facilita o processamento e a manipulação das informações.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tipos-primitivos"&gt;
&lt;h2&gt;TIPOS PRIMITIVOS&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Tipo Primitivo&lt;/strong&gt; são os tipos de dados mais simples, isto é, a informação em sua forma mais primitiva. Bons exemplos de valores primitivos são os caractere, os número, o valor True e False e etc. A documentação do Python não trata os tipos de dados elementares com a nomenclatura de &lt;strong&gt;Tipo Primitivo&lt;/strong&gt;, mas sim &lt;a class="reference external" href="https://docs.python.org/3.5/library/stdtypes.html"&gt;chama-os de tipos built-ins&lt;/a&gt;, isto é, classes que estão definidas por padrão dentro da Máquina Virtual do Python e que representam determinado tipo de informação.&lt;/p&gt;
&lt;p&gt;Nesse momento, chamaremos de Tipos Primitivos as informações em sua forma mais simples, porém, é importante saber que para o Python, não há tipo primitivos, mas sim, estruturas de dados que estão definidas, muitas vezes, dentro da própria Máquina Virtual do Python.&lt;/p&gt;
&lt;p&gt;É normal que as linguagens de programação tenham um conjunto de tipos chamados de: &lt;strong&gt;tipos primitivos&lt;/strong&gt;. Devemos pensar nessa classificação como sendo os tipos primários de informações, como por exemplo, o tipo numérico. Como sabemos, todo número é constituído por números. Dessa forma, o tipo numérico pode ser qualquer valor que seja composto por 1 ou mais caracteres numéricos. Dessa forma, isto é, tendo a certeza de que uma variável declarada como sendo do tipo numérico inteiro sempre terá um valor numérico válido, somos capazes de desenvolver funções especificas que manipulam esse tipo de dado de maneira muito mais eficiente e sem a necessidade de verificação se o tipo da informação contida em determinada variável é válido.&lt;/p&gt;
&lt;p&gt;Da mesma forma, temos o tipo de dado que representa conjuntos de caracteres, que na programação, é comumente chamado de &lt;cite&gt;String&lt;/cite&gt; e o Python o chama de &lt;cite&gt;str&lt;/cite&gt;. As &lt;cite&gt;String&lt;/cite&gt; são capazes de armazenar conjuntos de caracteres que estão dispostos numa determinada ordem. Todas as vezes que estivermos manipulando dados que contenha caracteres - o tipo mais primitivo, isto é, a maneira mais abstrata para representarmos caracteres - estaremos utilizando uma variável definida como sendo do tipo &lt;cite&gt;str&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;O fato de o Python não trabalhar com tipo primitivos diretamente, deve-se ao fato de que em Python, &lt;strong&gt;tudo são objetos&lt;/strong&gt;. Dessa forma, o que chamaríamos de primitivo é, em Python, representado como uma e toda informação será, um objeto propriamente dito. A seguir, temos a lista dos principais tipos built-ins da linguagem Python:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;int - para números inteiros&lt;/li&gt;
&lt;li&gt;str - para conjunto de caracteres&lt;/li&gt;
&lt;li&gt;bool - armazena True ou False&lt;/li&gt;
&lt;li&gt;list - para agrupar um conjunto de elementos&lt;/li&gt;
&lt;li&gt;tupla - igual ao tipo &lt;cite&gt;list&lt;/cite&gt;, porém, imutável&lt;/li&gt;
&lt;li&gt;dic - para agrupar elementos que serão recuperados por uma &lt;cite&gt;chave&lt;/cite&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;O Python fornece um conjunto de tipos básicos bastante amplo e que normalmente, atendem a maioria das necessidades. Cada tipo citado, possui um conjunto de funções e métodos que permitem manipularmos as informações, contidas na variável, de maneira bastante eficiente.&lt;/p&gt;
&lt;p&gt;Sempre que formos criar um novo &lt;strong&gt;tipo de dados&lt;/strong&gt;, acabaremos utilizando os tipos básicos da linguagem, como por exemplo, o tipo &lt;cite&gt;int&lt;/cite&gt;, ou então, o tipo &lt;cite&gt;str&lt;/cite&gt; e assim por diante.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diferenca-entre-tipo-e-valor"&gt;
&lt;h2&gt;DIFERENÇA ENTRE TIPO E VALOR&lt;/h2&gt;
&lt;p&gt;O &lt;strong&gt;valor&lt;/strong&gt; é qualquer informação, seja um número, texto, música, vídeo e etc. O &lt;strong&gt;tipo&lt;/strong&gt; por sua vez, é a estrutura da informação e a forma de classificarmos os dados.&lt;/p&gt;
&lt;p&gt;Todo valor numérico deve ser capaz de ser somado a outro valor, ou então, subtraido. Da mesma forma que todo texto, deve ser capaz de ser concatenado a outro, isto é, ser juntado a outro conjunto de caracteres.&lt;/p&gt;
&lt;p&gt;O &lt;strong&gt;tipo&lt;/strong&gt; da informação deve ser pensado como uma forma de classificarmos as diferentes informações e assim, termos a disposição um conjunto de funções para tratarmos e modificarmos os valores.&lt;/p&gt;
&lt;p&gt;É importante saber que somos capazes de criar novos tipos de dados a qualquer momento, e a programação orientada a objetos é, em sua definição mais primitiva, uma maneira de criarmos novos tipos abstratos e definirmos, na estrutura da classe, funções, métodos, verificações que busquem tratar valores que tenham uma mesma estrutura.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conversao-de-dados-ou-coercao-de-tipos"&gt;
&lt;h2&gt;CONVERSÃO DE DADOS OU COERÇÃO DE TIPOS&lt;/h2&gt;
&lt;p&gt;Se as informações possuem tipos, logo, temos de ser capazes em converter um tipo de informação num outro tipo de dado. Essa ação de conversão é comumente chamada de &lt;strong&gt;Coerção de Tipos&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Linguagem tipada é aquela que permite a classificação das informações pelo uso de tipos de dados, por exemplo, o Python trata um conjunto de caracteres como sendo do tipo &lt;cite&gt;String&lt;/cite&gt;, logo, o Python é uma linguagem tipada, no caso, uma linguagem dinamicamente tipada.&lt;/p&gt;
&lt;p&gt;Se existem diferentes tipos de informação, temos de ser capazes de converter, por exemplo, um número para o tipo texto. Ou seja, a conversão de valores é essencial para que possamos trabalhar com informações tipadas, até porque, há diversas situações onde desejaremos manipular um número como sendo um texto.&lt;/p&gt;
&lt;p&gt;Essa conversão é comumente chamada de &lt;strong&gt;Conversão de Dados&lt;/strong&gt; ou então, &lt;strong&gt;Coerção de Tipos&lt;/strong&gt;. É importante observar, que uma informação do tipo texto, pode ser constituida de letras e números, ou seja, o grupo de caracteres alfanuméricos. Então, um número pode ser representado como um texto, mas o contrário, nem sempre será possível.&lt;/p&gt;
&lt;p&gt;Pra convertermos, por exemplo, um texto para o tipo numérico, devemos especificar o tipo a ser convertido e passarmos o valor através de parêntesis, como podemos ver a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tipo_a_ser_convertido&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;informação&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A seguir, declaramos uma variável de nome &lt;cite&gt;texto&lt;/cite&gt; e atribuimos um valor numérico a mesma. Em seguida, declaramos outra variável, de nome &lt;cite&gt;num&lt;/cite&gt; e atribuimos a esta o resultado da Coerção de Tipos. Isto é, dissemos que o valor da variável &lt;cite&gt;texto&lt;/cite&gt; deve ser convertido num tipo numérico &lt;cite&gt;num = int(texto)&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#coding: utf-8&lt;/span&gt;

&lt;span class="n"&gt;texto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;texto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;texto&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#o sinal de + concatena duas informações&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#o sinal de + soma dois números&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1010&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No exemplo acima, podemos observar que a utilização do operador &lt;cite&gt;+&lt;/cite&gt; funciona de maneira diferente conforme o tipo de dado que esteja sendo utilizado. Quando o sinal de adição estiver entre dois valores numéricos, estes serão somados. Quando o sinal adição estiver entre dois valores do tipo &lt;cite&gt;String&lt;/cite&gt;, estes serão concatenados (juntados) e quando o sinal de adição estiver entre um valor do tipo numérico e do tipo &lt;cite&gt;String&lt;/cite&gt;, uma exceção será levantada dizendo que não é possível utilizar o operador de adição entre tipos distintos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="para-refletir"&gt;
&lt;h2&gt;PARA REFLETIR&lt;/h2&gt;
&lt;p&gt;Em Python, tudo é tratado como sendo um objeto, inclusive, o próprio código por nós escrito!&lt;/p&gt;
&lt;p&gt;Linguagens como Java e C# também são fortemente orientada a objetos, porém, ambas possuem por exemplo, tipos de dados primitivos, o que não existe no Python.&lt;/p&gt;
&lt;p&gt;O Python trata todo e qualquer valor como sendo um objeto. Se tivermos 2 variáveis que contenham o número 10, para o Python, ambas variáveis estarão apontando para um objeto na memória, cujo valor é 10. Dizer que uma variável contém um valor, é por definição da linguagem, um erro, até porque, os valores não estão armazenados numa posição determinada pela variável. Em Python, os dados são associados a variáveis, logo, variáveis que contenham um mesmo valor, na verdade, internamente o que haverá, é uma informação associadas a várias variáveis. Há um excelente &lt;a class="reference external" href="http://pythonclub.com.br/tuplas-mutantes-em-python.html"&gt;artigo falando sobre a forma que o Python trata os tipos e as informações publicado pelo Luciano Ramalho&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Por fim, temos 4 tipos para classificação para os tipos de informações.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Tipos simples&lt;/tt&gt;  - constituidos por simples blocos, como &lt;tt class="docutils literal"&gt;int()&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;float()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Tipos de contêiner&lt;/tt&gt; - objetos capazes de conter outros objetos&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Tipos de código&lt;/tt&gt; - objetos encapsuladores de elementos dos nosso programas&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Tipos internos&lt;/tt&gt; - tipos que serão utilizados durante a execução do nosso programa&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;No &lt;a class="reference external" href="http://www.ibm.com/developerworks/br/library/os-python1/"&gt;link a seguir há mais informações sobre os tipos de dados do Python&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cláudio Rogério Carvalho Filho</dc:creator><pubDate>Mon, 18 Jul 2016 16:20:00 -0300</pubDate><guid isPermaLink="false">tag:excript.com,2016-07-18:python/tipos-de-dados-python.html</guid><category>curso</category><category>python</category><category>tipos</category><category>tipo de dados</category><category>int</category><category>float</category><category>string</category><category>date</category><category>bool</category><category>str</category><category>blog</category></item><item><title>Variáveis em Java</title><link>http://excript.com/java/variavel-java.html</link><description>
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Variáveis em Java representam a forma em que armazenamos dados que serão processados.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="definicao-de-variavel"&gt;
&lt;h2&gt;DEFINIÇÃO DE VARIÁVEL&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Variável&lt;/strong&gt; é uma região de memória reservada para armazenar valores de modo temporário. Carregamos para a memórias as informações que estamos trabalhando em determinado momento porém, sem remove-las do local de origem.&lt;/p&gt;
&lt;p&gt;Em Java, todas as variáveis possuiram um tipo e este será definido ainda na declaração. Podemos alterar o valor armazenado numa variável a qualquer momento, porém, o tipo declarado não poderá ser alterado durante o tempo de execução.
Mais precisamente, as variáveis são carregadas para a memória RAM (Random Access Memory) devido a alta velocidade na leitura e gravação dessa mídia. Como já dito, variáveis armazenam valores temporários, no caso, os valores que está sendo manipulando em determinado momento. A memória RAM possui alto desempenho na leitura e gravação, por isso definimos as variáveis ali, no entanto, quando o computador for desligado ou então, houver interrupção no fornecimento de energia, todo valor alocado na memória RAM é perdido de maneira irreversível.&lt;/p&gt;
&lt;p&gt;Não há limites na declaração de variáveis, logo, somos livres para definirmos a quantidade necessário, no entanto, devemos ser cautelosos, até porque, cada variável declarada irá consumir recursos do dispositivo e pode prejudicar o desempenho de outras aplicações.&lt;/p&gt;
&lt;p&gt;O Java reservará espaço a cada variável individualmente e, associa a esta região de memória o nome que definido, ou seja, a referência. Temos assim que, a localização do espaço de memória será feito por intermédio da referência (nome da variável) definida em nossos códigos. A partir do momento em que não fizermos mais uso de determinada variável, a JVM desalocará o espaço utilizado pela variável devolvendo-o ao sistema operacional.&lt;/p&gt;
&lt;p&gt;A melhor maneira para manipularmos informações seja num &lt;tt class="docutils literal"&gt;programa&lt;/tt&gt;, como também num &lt;tt class="docutils literal"&gt;Script&lt;/tt&gt;, é através da utilização de variáveis. Variáveis possuem uma estrutura simples e rápida para utilização e o seu conceito vem desde os primórdios da computação.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="funcionamento-das-variaveis"&gt;
&lt;h2&gt;FUNCIONAMENTO DAS VARIÁVEIS&lt;/h2&gt;
&lt;p&gt;As variáveis são, de fato, regiões físicas numeradas. Cada segmento possui um número inteiro que o identifica e o distingue. Este espaço, ou melhor, essa região de memória é administrado pelo hardware, pela placa-mãe, processador e sistema operacional. Quando declaramos variáveis, estamos de fato, reservando um espaço físico para o armazenamento temporário de informações que serão utilizadas no trecho de código em que a variável está sendo definida.&lt;/p&gt;
&lt;p&gt;Os pentes de memória RAM possuem, obviamente, um limite, porém, atualmente, raríssimas vezes iremos ocupar todo espaço do dispositivo, salvo nas vezes em que nossas aplicações apresentarem problemas. Por isso, diz-se que não limites de variáveis que podemos declarar, até porque a quantidade é, de fato, um número bastante elevado.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="definicao-de-referencia"&gt;
&lt;h2&gt;DEFINIÇÃO DE REFERÊNCIA&lt;/h2&gt;
&lt;p&gt;Nome de variável e referência são sinônimos no desenvolvimento de aplicações. Como estudamos, as variáveis são identificadas por números e estão num espaço físico de memória, logo, a expressão referência, indica que temos uma entidade que está referenciando aquela região que é, em suma, o local reservado de determinada variável.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="declaracao-e-uso-de-uma-variavel-inteira"&gt;
&lt;h2&gt;DECLARAÇÃO E USO DE UMA VARIÁVEL INTEIRA:&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Variaveis&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//declarando uma variável numérica inteira&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;valor&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//atribuindo o valor 100 para a variável&lt;/span&gt;
        &lt;span class="n"&gt;valor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;//imprimindo o valor da variável na saída padrão&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;valor&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No exemplo acima declaramos uma variável do tipo &lt;code&gt;int&lt;/code&gt;, de nome &lt;code&gt;valor&lt;/code&gt;. Na linha seguinte atribuimos o número inteiro &lt;code&gt;100&lt;/code&gt; a variável &lt;code&gt;valor&lt;/code&gt;. Por fim, utilizamos a função &lt;code&gt;println()&lt;/code&gt; para imprimirmos na tela o valor contido na variável &lt;code&gt;valor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;No exemplo acima, utilizamos alguns conceitos ainda não estudas, porém, é o tema das próximas aulas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-de-uso-de-variaveis"&gt;
&lt;h2&gt;EXEMPLO DE USO DE VARIÁVEIS&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;VarEstudo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;minhaVariavel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minhaVariavel&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dinheiro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.55&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dinheiro&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Aula0004&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;        * 1) um nome&lt;/span&gt;
&lt;span class="cm"&gt;        * 2) um tipo&lt;/span&gt;
&lt;span class="cm"&gt;        * 3) um tamanho&lt;/span&gt;
&lt;span class="cm"&gt;        * 4) um valor&lt;/span&gt;
&lt;span class="cm"&gt;        * */&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;        * 1) é temporário&lt;/span&gt;
&lt;span class="cm"&gt;        * 2) os dados são removidos da memória&lt;/span&gt;
&lt;span class="cm"&gt;        * quando o PC é desligado&lt;/span&gt;
&lt;span class="cm"&gt;        * 3) volatil&lt;/span&gt;
&lt;span class="cm"&gt;        * 4) o valor antigo sempre é perdido (para sempre)&lt;/span&gt;
&lt;span class="cm"&gt;        * 5) o Java, desaloca a memória&lt;/span&gt;
&lt;span class="cm"&gt;        * */&lt;/span&gt;
     &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cláudio Rogério Carvalho Filho</dc:creator><pubDate>Sat, 14 May 2016 01:00:00 -0300</pubDate><guid isPermaLink="false">tag:excript.com,2016-05-14:java/variavel-java.html</guid><category>java</category><category>variável</category><category>curso</category><category>int</category><category>blog</category></item></channel></rss>